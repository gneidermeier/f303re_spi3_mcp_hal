
spi_fd_polling_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002580  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08002720  08002720  00012720  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002804  08002804  00012804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002808  08002808  00012808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  0800280c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  7 .bss          0000021c  2000007c  2000007c  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000298  20000298  0002007c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c2fd  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001de8  00000000  00000000  0002c3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000054a4  00000000  00000000  0002e191  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000808  00000000  00000000  00033638  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c88  00000000  00000000  00033e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001ff55  00000000  00000000  00034ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000085b9  00000000  00000000  00054a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000c0e6f  00000000  00000000  0005cfd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0011de45  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001a60  00000000  00000000  0011dec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002708 	.word	0x08002708

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08002708 	.word	0x08002708

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	b086      	sub	sp, #24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000294:	b948      	cbnz	r0, 80002aa <BSP_LED_Init+0x1a>
 8000296:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <BSP_LED_Init+0x48>)
 8000298:	695a      	ldr	r2, [r3, #20]
 800029a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800029e:	615a      	str	r2, [r3, #20]
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80002aa:	4c0c      	ldr	r4, [pc, #48]	; (80002dc <BSP_LED_Init+0x4c>)
 80002ac:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b0:	2520      	movs	r5, #32
 80002b2:	2301      	movs	r3, #1
 80002b4:	e9cd 5301 	strd	r5, r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002b8:	2600      	movs	r6, #0
 80002ba:	2303      	movs	r3, #3
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80002bc:	a901      	add	r1, sp, #4
 80002be:	6860      	ldr	r0, [r4, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002c0:	e9cd 6303 	strd	r6, r3, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80002c4:	f000 f90c 	bl	80004e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80002c8:	4632      	mov	r2, r6
 80002ca:	4629      	mov	r1, r5
 80002cc:	6860      	ldr	r0, [r4, #4]
 80002ce:	f000 f9d9 	bl	8000684 <HAL_GPIO_WritePin>
}
 80002d2:	b006      	add	sp, #24
 80002d4:	bd70      	pop	{r4, r5, r6, pc}
 80002d6:	bf00      	nop
 80002d8:	40021000 	.word	0x40021000
 80002dc:	20000000 	.word	0x20000000

080002e0 <BSP_LED_On>:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <BSP_LED_On+0x10>)
 80002e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80002e6:	2201      	movs	r2, #1
 80002e8:	2120      	movs	r1, #32
 80002ea:	6840      	ldr	r0, [r0, #4]
 80002ec:	f000 b9ca 	b.w	8000684 <HAL_GPIO_WritePin>
 80002f0:	20000000 	.word	0x20000000

080002f4 <BSP_LED_Toggle>:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <BSP_LED_Toggle+0x10>)
 80002f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80002fa:	2120      	movs	r1, #32
 80002fc:	6840      	ldr	r0, [r0, #4]
 80002fe:	f000 b9c6 	b.w	800068e <HAL_GPIO_TogglePin>
 8000302:	bf00      	nop
 8000304:	20000000 	.word	0x20000000

08000308 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000308:	4915      	ldr	r1, [pc, #84]	; (8000360 <SystemInit+0x58>)
 800030a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800030e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000316:	4b13      	ldr	r3, [pc, #76]	; (8000364 <SystemInit+0x5c>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	f042 0201 	orr.w	r2, r2, #1
 800031e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000320:	6858      	ldr	r0, [r3, #4]
 8000322:	4a11      	ldr	r2, [pc, #68]	; (8000368 <SystemInit+0x60>)
 8000324:	4002      	ands	r2, r0
 8000326:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800032e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000332:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800033a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800033c:	685a      	ldr	r2, [r3, #4]
 800033e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000342:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000346:	f022 020f 	bic.w	r2, r2, #15
 800034a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800034c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800034e:	4a07      	ldr	r2, [pc, #28]	; (800036c <SystemInit+0x64>)
 8000350:	4002      	ands	r2, r0
 8000352:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000358:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800035c:	608b      	str	r3, [r1, #8]
#endif
}
 800035e:	4770      	bx	lr
 8000360:	e000ed00 	.word	0xe000ed00
 8000364:	40021000 	.word	0x40021000
 8000368:	f87fc00c 	.word	0xf87fc00c
 800036c:	ff00fccc 	.word	0xff00fccc

08000370 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000370:	4770      	bx	lr
	...

08000374 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000374:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000376:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <HAL_InitTick+0x3c>)
 8000378:	4e0e      	ldr	r6, [pc, #56]	; (80003b4 <HAL_InitTick+0x40>)
{
 800037a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800037c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000380:	7830      	ldrb	r0, [r6, #0]
 8000382:	fbb3 f3f0 	udiv	r3, r3, r0
 8000386:	6810      	ldr	r0, [r2, #0]
 8000388:	fbb0 f0f3 	udiv	r0, r0, r3
 800038c:	f000 f892 	bl	80004b4 <HAL_SYSTICK_Config>
 8000390:	4604      	mov	r4, r0
 8000392:	b950      	cbnz	r0, 80003aa <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000394:	2d0f      	cmp	r5, #15
 8000396:	d808      	bhi.n	80003aa <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000398:	4602      	mov	r2, r0
 800039a:	4629      	mov	r1, r5
 800039c:	f04f 30ff 	mov.w	r0, #4294967295
 80003a0:	f000 f854 	bl	800044c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003a4:	6075      	str	r5, [r6, #4]
 80003a6:	4620      	mov	r0, r4
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80003aa:	2001      	movs	r0, #1
 80003ac:	e7fc      	b.n	80003a8 <HAL_InitTick+0x34>
 80003ae:	bf00      	nop
 80003b0:	2000000c 	.word	0x2000000c
 80003b4:	20000010 	.word	0x20000010

080003b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003b8:	4a07      	ldr	r2, [pc, #28]	; (80003d8 <HAL_Init+0x20>)
{
 80003ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003bc:	6813      	ldr	r3, [r2, #0]
 80003be:	f043 0310 	orr.w	r3, r3, #16
 80003c2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003c4:	2003      	movs	r0, #3
 80003c6:	f000 f82f 	bl	8000428 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80003ca:	200f      	movs	r0, #15
 80003cc:	f7ff ffd2 	bl	8000374 <HAL_InitTick>
  HAL_MspInit();
 80003d0:	f7ff ffce 	bl	8000370 <HAL_MspInit>
}
 80003d4:	2000      	movs	r0, #0
 80003d6:	bd08      	pop	{r3, pc}
 80003d8:	40022000 	.word	0x40022000

080003dc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80003dc:	4a03      	ldr	r2, [pc, #12]	; (80003ec <HAL_IncTick+0x10>)
 80003de:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <HAL_IncTick+0x14>)
 80003e0:	6811      	ldr	r1, [r2, #0]
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	440b      	add	r3, r1
 80003e6:	6013      	str	r3, [r2, #0]
}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	200000a8 	.word	0x200000a8
 80003f0:	20000010 	.word	0x20000010

080003f4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80003f4:	4b01      	ldr	r3, [pc, #4]	; (80003fc <HAL_GetTick+0x8>)
 80003f6:	6818      	ldr	r0, [r3, #0]
}
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	200000a8 	.word	0x200000a8

08000400 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000400:	b538      	push	{r3, r4, r5, lr}
 8000402:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000404:	f7ff fff6 	bl	80003f4 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000408:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800040a:	bf1c      	itt	ne
 800040c:	4b05      	ldrne	r3, [pc, #20]	; (8000424 <HAL_Delay+0x24>)
 800040e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000410:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000412:	bf18      	it	ne
 8000414:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000416:	f7ff ffed 	bl	80003f4 <HAL_GetTick>
 800041a:	1b40      	subs	r0, r0, r5
 800041c:	42a0      	cmp	r0, r4
 800041e:	d3fa      	bcc.n	8000416 <HAL_Delay+0x16>
  {
  }
}
 8000420:	bd38      	pop	{r3, r4, r5, pc}
 8000422:	bf00      	nop
 8000424:	20000010 	.word	0x20000010

08000428 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000428:	4a07      	ldr	r2, [pc, #28]	; (8000448 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800042a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800042c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000430:	041b      	lsls	r3, r3, #16
 8000432:	0c1b      	lsrs	r3, r3, #16
 8000434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000438:	0200      	lsls	r0, r0, #8
 800043a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800043e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000442:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000444:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000446:	4770      	bx	lr
 8000448:	e000ed00 	.word	0xe000ed00

0800044c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800044c:	4b17      	ldr	r3, [pc, #92]	; (80004ac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800044e:	b570      	push	{r4, r5, r6, lr}
 8000450:	68dc      	ldr	r4, [r3, #12]
 8000452:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000456:	f1c4 0507 	rsb	r5, r4, #7
 800045a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800045c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000460:	bf28      	it	cs
 8000462:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000464:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000468:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800046a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800046e:	bf8c      	ite	hi
 8000470:	3c03      	subhi	r4, #3
 8000472:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000474:	ea21 0303 	bic.w	r3, r1, r3
 8000478:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800047a:	fa06 f404 	lsl.w	r4, r6, r4
 800047e:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000482:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000484:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000488:	bfa8      	it	ge
 800048a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800048e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000492:	bfbc      	itt	lt
 8000494:	f000 000f 	andlt.w	r0, r0, #15
 8000498:	4a05      	ldrlt	r2, [pc, #20]	; (80004b0 <HAL_NVIC_SetPriority+0x64>)
 800049a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800049c:	bfaa      	itet	ge
 800049e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80004a8:	bd70      	pop	{r4, r5, r6, pc}
 80004aa:	bf00      	nop
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	e000ed14 	.word	0xe000ed14

080004b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004b4:	3801      	subs	r0, #1
 80004b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004ba:	d20a      	bcs.n	80004d2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004be:	4a07      	ldr	r2, [pc, #28]	; (80004dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004c0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c2:	21f0      	movs	r1, #240	; 0xf0
 80004c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	e000e010 	.word	0xe000e010
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004e4:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e8:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8000680 <HAL_GPIO_Init+0x1a0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80004ec:	4a62      	ldr	r2, [pc, #392]	; (8000678 <HAL_GPIO_Init+0x198>)
  uint32_t position = 0x00u;
 80004ee:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004f0:	fa38 f403 	lsrs.w	r4, r8, r3
 80004f4:	d102      	bne.n	80004fc <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80004f6:	b003      	add	sp, #12
 80004f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80004fc:	f04f 0c01 	mov.w	ip, #1
 8000500:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8000504:	ea1c 0608 	ands.w	r6, ip, r8
 8000508:	f000 80a8 	beq.w	800065c <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800050c:	684c      	ldr	r4, [r1, #4]
 800050e:	f024 0a10 	bic.w	sl, r4, #16
 8000512:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000516:	2503      	movs	r5, #3
 8000518:	f10a 37ff 	add.w	r7, sl, #4294967295
 800051c:	fa05 f50e 	lsl.w	r5, r5, lr
 8000520:	2f01      	cmp	r7, #1
 8000522:	ea6f 0505 	mvn.w	r5, r5
 8000526:	d811      	bhi.n	800054c <HAL_GPIO_Init+0x6c>
        temp = GPIOx->OSPEEDR;
 8000528:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800052a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800052e:	68cf      	ldr	r7, [r1, #12]
 8000530:	fa07 f70e 	lsl.w	r7, r7, lr
 8000534:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8000538:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800053a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800053c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000540:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000544:	409f      	lsls	r7, r3
 8000546:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800054a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800054c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800054e:	ea07 0c05 	and.w	ip, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000552:	688f      	ldr	r7, [r1, #8]
 8000554:	fa07 f70e 	lsl.w	r7, r7, lr
 8000558:	ea47 070c 	orr.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800055c:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 8000560:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000562:	d116      	bne.n	8000592 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3u];
 8000564:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000568:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800056c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000570:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000574:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000578:	f04f 0c0f 	mov.w	ip, #15
 800057c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000580:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000584:	690f      	ldr	r7, [r1, #16]
 8000586:	fa07 f70b 	lsl.w	r7, r7, fp
 800058a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3u] = temp;
 800058e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000592:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000594:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000596:	f004 0703 	and.w	r7, r4, #3
 800059a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800059e:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 80005a2:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005a4:	00e5      	lsls	r5, r4, #3
 80005a6:	d559      	bpl.n	800065c <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a8:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80005ac:	f045 0501 	orr.w	r5, r5, #1
 80005b0:	f8c9 5018 	str.w	r5, [r9, #24]
 80005b4:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80005b8:	f023 0703 	bic.w	r7, r3, #3
 80005bc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80005c0:	f005 0501 	and.w	r5, r5, #1
 80005c4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80005c8:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005ca:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ce:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80005d0:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005d2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80005d6:	f04f 0c0f 	mov.w	ip, #15
 80005da:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80005de:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005e2:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80005e6:	d03b      	beq.n	8000660 <HAL_GPIO_Init+0x180>
 80005e8:	4d24      	ldr	r5, [pc, #144]	; (800067c <HAL_GPIO_Init+0x19c>)
 80005ea:	42a8      	cmp	r0, r5
 80005ec:	d03a      	beq.n	8000664 <HAL_GPIO_Init+0x184>
 80005ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005f2:	42a8      	cmp	r0, r5
 80005f4:	d038      	beq.n	8000668 <HAL_GPIO_Init+0x188>
 80005f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005fa:	42a8      	cmp	r0, r5
 80005fc:	d036      	beq.n	800066c <HAL_GPIO_Init+0x18c>
 80005fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000602:	42a8      	cmp	r0, r5
 8000604:	d034      	beq.n	8000670 <HAL_GPIO_Init+0x190>
 8000606:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800060a:	42a8      	cmp	r0, r5
 800060c:	d032      	beq.n	8000674 <HAL_GPIO_Init+0x194>
 800060e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000612:	42a8      	cmp	r0, r5
 8000614:	bf14      	ite	ne
 8000616:	2507      	movne	r5, #7
 8000618:	2506      	moveq	r5, #6
 800061a:	fa05 f50e 	lsl.w	r5, r5, lr
 800061e:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000622:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000624:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 8000626:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000628:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 800062c:	bf0c      	ite	eq
 800062e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000630:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000632:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000634:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000636:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 800063a:	bf0c      	ite	eq
 800063c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800063e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000640:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000642:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000644:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000648:	bf0c      	ite	eq
 800064a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800064c:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800064e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000650:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000652:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000654:	bf54      	ite	pl
 8000656:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000658:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 800065a:	60d5      	str	r5, [r2, #12]
    position++;
 800065c:	3301      	adds	r3, #1
 800065e:	e747      	b.n	80004f0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000660:	2500      	movs	r5, #0
 8000662:	e7da      	b.n	800061a <HAL_GPIO_Init+0x13a>
 8000664:	2501      	movs	r5, #1
 8000666:	e7d8      	b.n	800061a <HAL_GPIO_Init+0x13a>
 8000668:	2502      	movs	r5, #2
 800066a:	e7d6      	b.n	800061a <HAL_GPIO_Init+0x13a>
 800066c:	2503      	movs	r5, #3
 800066e:	e7d4      	b.n	800061a <HAL_GPIO_Init+0x13a>
 8000670:	2504      	movs	r5, #4
 8000672:	e7d2      	b.n	800061a <HAL_GPIO_Init+0x13a>
 8000674:	2505      	movs	r5, #5
 8000676:	e7d0      	b.n	800061a <HAL_GPIO_Init+0x13a>
 8000678:	40010400 	.word	0x40010400
 800067c:	48000400 	.word	0x48000400
 8000680:	40021000 	.word	0x40021000

08000684 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000684:	b10a      	cbz	r2, 800068a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000686:	6181      	str	r1, [r0, #24]
 8000688:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800068a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800068c:	4770      	bx	lr

0800068e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800068e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000690:	ea01 0203 	and.w	r2, r1, r3
 8000694:	ea21 0103 	bic.w	r1, r1, r3
 8000698:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800069c:	6181      	str	r1, [r0, #24]
}
 800069e:	4770      	bx	lr

080006a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80006a4:	4605      	mov	r5, r0
 80006a6:	b908      	cbnz	r0, 80006ac <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80006a8:	2001      	movs	r0, #1
 80006aa:	e05b      	b.n	8000764 <HAL_RCC_OscConfig+0xc4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006ac:	6803      	ldr	r3, [r0, #0]
 80006ae:	07df      	lsls	r7, r3, #31
 80006b0:	d411      	bmi.n	80006d6 <HAL_RCC_OscConfig+0x36>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006b2:	682b      	ldr	r3, [r5, #0]
 80006b4:	079e      	lsls	r6, r3, #30
 80006b6:	f100 808a 	bmi.w	80007ce <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006ba:	682b      	ldr	r3, [r5, #0]
 80006bc:	071c      	lsls	r4, r3, #28
 80006be:	f100 80fe 	bmi.w	80008be <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006c2:	682b      	ldr	r3, [r5, #0]
 80006c4:	0758      	lsls	r0, r3, #29
 80006c6:	f100 8147 	bmi.w	8000958 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80006ca:	69a8      	ldr	r0, [r5, #24]
 80006cc:	2800      	cmp	r0, #0
 80006ce:	f040 81de 	bne.w	8000a8e <HAL_RCC_OscConfig+0x3ee>
        }
      }
    }
  }

  return HAL_OK;
 80006d2:	2000      	movs	r0, #0
 80006d4:	e046      	b.n	8000764 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80006d6:	4cbe      	ldr	r4, [pc, #760]	; (80009d0 <HAL_RCC_OscConfig+0x330>)
 80006d8:	6863      	ldr	r3, [r4, #4]
 80006da:	f003 030c 	and.w	r3, r3, #12
 80006de:	2b04      	cmp	r3, #4
 80006e0:	d00a      	beq.n	80006f8 <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006e2:	6863      	ldr	r3, [r4, #4]
 80006e4:	f003 030c 	and.w	r3, r3, #12
 80006e8:	2b08      	cmp	r3, #8
 80006ea:	d119      	bne.n	8000720 <HAL_RCC_OscConfig+0x80>
 80006ec:	6863      	ldr	r3, [r4, #4]
 80006ee:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80006f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006f6:	d113      	bne.n	8000720 <HAL_RCC_OscConfig+0x80>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006fc:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000700:	6821      	ldr	r1, [r4, #0]
 8000702:	fa93 f3a3 	rbit	r3, r3
 8000706:	fab3 f383 	clz	r3, r3
 800070a:	f003 031f 	and.w	r3, r3, #31
 800070e:	2201      	movs	r2, #1
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	420b      	tst	r3, r1
 8000716:	d0cc      	beq.n	80006b2 <HAL_RCC_OscConfig+0x12>
 8000718:	686b      	ldr	r3, [r5, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1c9      	bne.n	80006b2 <HAL_RCC_OscConfig+0x12>
 800071e:	e7c3      	b.n	80006a8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000720:	686b      	ldr	r3, [r5, #4]
 8000722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000726:	d120      	bne.n	800076a <HAL_RCC_OscConfig+0xca>
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800072e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000730:	f7ff fe60 	bl	80003f4 <HAL_GetTick>
 8000734:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000738:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800073a:	2701      	movs	r7, #1
 800073c:	fa96 f3a6 	rbit	r3, r6
 8000740:	6822      	ldr	r2, [r4, #0]
 8000742:	fa96 f3a6 	rbit	r3, r6
 8000746:	fab3 f383 	clz	r3, r3
 800074a:	f003 031f 	and.w	r3, r3, #31
 800074e:	fa07 f303 	lsl.w	r3, r7, r3
 8000752:	4213      	tst	r3, r2
 8000754:	d1ad      	bne.n	80006b2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000756:	f7ff fe4d 	bl	80003f4 <HAL_GetTick>
 800075a:	eba0 0008 	sub.w	r0, r0, r8
 800075e:	2864      	cmp	r0, #100	; 0x64
 8000760:	d9ec      	bls.n	800073c <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 8000762:	2003      	movs	r0, #3
}
 8000764:	b002      	add	sp, #8
 8000766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800076a:	bb0b      	cbnz	r3, 80007b0 <HAL_RCC_OscConfig+0x110>
 800076c:	6823      	ldr	r3, [r4, #0]
 800076e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000772:	6023      	str	r3, [r4, #0]
 8000774:	6823      	ldr	r3, [r4, #0]
 8000776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800077c:	f7ff fe3a 	bl	80003f4 <HAL_GetTick>
 8000780:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000784:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000786:	2701      	movs	r7, #1
 8000788:	fa96 f3a6 	rbit	r3, r6
 800078c:	6822      	ldr	r2, [r4, #0]
 800078e:	fa96 f3a6 	rbit	r3, r6
 8000792:	fab3 f383 	clz	r3, r3
 8000796:	f003 031f 	and.w	r3, r3, #31
 800079a:	fa07 f303 	lsl.w	r3, r7, r3
 800079e:	4213      	tst	r3, r2
 80007a0:	d087      	beq.n	80006b2 <HAL_RCC_OscConfig+0x12>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007a2:	f7ff fe27 	bl	80003f4 <HAL_GetTick>
 80007a6:	eba0 0008 	sub.w	r0, r0, r8
 80007aa:	2864      	cmp	r0, #100	; 0x64
 80007ac:	d9ec      	bls.n	8000788 <HAL_RCC_OscConfig+0xe8>
 80007ae:	e7d8      	b.n	8000762 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007b4:	6823      	ldr	r3, [r4, #0]
 80007b6:	d103      	bne.n	80007c0 <HAL_RCC_OscConfig+0x120>
 80007b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007bc:	6023      	str	r3, [r4, #0]
 80007be:	e7b3      	b.n	8000728 <HAL_RCC_OscConfig+0x88>
 80007c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007c4:	6023      	str	r3, [r4, #0]
 80007c6:	6823      	ldr	r3, [r4, #0]
 80007c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007cc:	e7af      	b.n	800072e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80007ce:	4c80      	ldr	r4, [pc, #512]	; (80009d0 <HAL_RCC_OscConfig+0x330>)
 80007d0:	6863      	ldr	r3, [r4, #4]
 80007d2:	f013 0f0c 	tst.w	r3, #12
 80007d6:	d00a      	beq.n	80007ee <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80007d8:	6863      	ldr	r3, [r4, #4]
 80007da:	f003 030c 	and.w	r3, r3, #12
 80007de:	2b08      	cmp	r3, #8
 80007e0:	d125      	bne.n	800082e <HAL_RCC_OscConfig+0x18e>
 80007e2:	6863      	ldr	r3, [r4, #4]
 80007e4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80007e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007ec:	d11f      	bne.n	800082e <HAL_RCC_OscConfig+0x18e>
 80007ee:	2302      	movs	r3, #2
 80007f0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007f4:	6821      	ldr	r1, [r4, #0]
 80007f6:	fa93 f3a3 	rbit	r3, r3
 80007fa:	fab3 f383 	clz	r3, r3
 80007fe:	f003 031f 	and.w	r3, r3, #31
 8000802:	2201      	movs	r2, #1
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	420b      	tst	r3, r1
 800080a:	d003      	beq.n	8000814 <HAL_RCC_OscConfig+0x174>
 800080c:	68eb      	ldr	r3, [r5, #12]
 800080e:	4293      	cmp	r3, r2
 8000810:	f47f af4a 	bne.w	80006a8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000814:	6821      	ldr	r1, [r4, #0]
 8000816:	23f8      	movs	r3, #248	; 0xf8
 8000818:	fa93 f3a3 	rbit	r3, r3
 800081c:	fab3 f283 	clz	r2, r3
 8000820:	692b      	ldr	r3, [r5, #16]
 8000822:	4093      	lsls	r3, r2
 8000824:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000828:	4313      	orrs	r3, r2
 800082a:	6023      	str	r3, [r4, #0]
 800082c:	e745      	b.n	80006ba <HAL_RCC_OscConfig+0x1a>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800082e:	68ea      	ldr	r2, [r5, #12]
 8000830:	2601      	movs	r6, #1
 8000832:	b30a      	cbz	r2, 8000878 <HAL_RCC_OscConfig+0x1d8>
 8000834:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000838:	fab3 f383 	clz	r3, r3
 800083c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000840:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	2702      	movs	r7, #2
 8000848:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800084a:	f7ff fdd3 	bl	80003f4 <HAL_GetTick>
 800084e:	4680      	mov	r8, r0
 8000850:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000854:	6822      	ldr	r2, [r4, #0]
 8000856:	fa97 f3a7 	rbit	r3, r7
 800085a:	fab3 f383 	clz	r3, r3
 800085e:	f003 031f 	and.w	r3, r3, #31
 8000862:	fa06 f303 	lsl.w	r3, r6, r3
 8000866:	4213      	tst	r3, r2
 8000868:	d1d4      	bne.n	8000814 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800086a:	f7ff fdc3 	bl	80003f4 <HAL_GetTick>
 800086e:	eba0 0008 	sub.w	r0, r0, r8
 8000872:	2802      	cmp	r0, #2
 8000874:	d9ec      	bls.n	8000850 <HAL_RCC_OscConfig+0x1b0>
 8000876:	e774      	b.n	8000762 <HAL_RCC_OscConfig+0xc2>
 8000878:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800087c:	fab3 f383 	clz	r3, r3
 8000880:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000884:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	2702      	movs	r7, #2
 800088c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800088e:	f7ff fdb1 	bl	80003f4 <HAL_GetTick>
 8000892:	4680      	mov	r8, r0
 8000894:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000898:	6822      	ldr	r2, [r4, #0]
 800089a:	fa97 f3a7 	rbit	r3, r7
 800089e:	fab3 f383 	clz	r3, r3
 80008a2:	f003 031f 	and.w	r3, r3, #31
 80008a6:	fa06 f303 	lsl.w	r3, r6, r3
 80008aa:	4213      	tst	r3, r2
 80008ac:	f43f af05 	beq.w	80006ba <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008b0:	f7ff fda0 	bl	80003f4 <HAL_GetTick>
 80008b4:	eba0 0008 	sub.w	r0, r0, r8
 80008b8:	2802      	cmp	r0, #2
 80008ba:	d9eb      	bls.n	8000894 <HAL_RCC_OscConfig+0x1f4>
 80008bc:	e751      	b.n	8000762 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008be:	696a      	ldr	r2, [r5, #20]
 80008c0:	4e43      	ldr	r6, [pc, #268]	; (80009d0 <HAL_RCC_OscConfig+0x330>)
 80008c2:	4944      	ldr	r1, [pc, #272]	; (80009d4 <HAL_RCC_OscConfig+0x334>)
 80008c4:	2401      	movs	r4, #1
 80008c6:	b31a      	cbz	r2, 8000910 <HAL_RCC_OscConfig+0x270>
 80008c8:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80008cc:	fab3 f383 	clz	r3, r3
 80008d0:	440b      	add	r3, r1
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	2702      	movs	r7, #2
 80008d6:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80008d8:	f7ff fd8c 	bl	80003f4 <HAL_GetTick>
 80008dc:	4680      	mov	r8, r0
 80008de:	fa97 f3a7 	rbit	r3, r7
 80008e2:	fa97 f3a7 	rbit	r3, r7
 80008e6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008ea:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80008ec:	fa97 f3a7 	rbit	r3, r7
 80008f0:	fab3 f383 	clz	r3, r3
 80008f4:	f003 031f 	and.w	r3, r3, #31
 80008f8:	fa04 f303 	lsl.w	r3, r4, r3
 80008fc:	4213      	tst	r3, r2
 80008fe:	f47f aee0 	bne.w	80006c2 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000902:	f7ff fd77 	bl	80003f4 <HAL_GetTick>
 8000906:	eba0 0008 	sub.w	r0, r0, r8
 800090a:	2802      	cmp	r0, #2
 800090c:	d9e7      	bls.n	80008de <HAL_RCC_OscConfig+0x23e>
 800090e:	e728      	b.n	8000762 <HAL_RCC_OscConfig+0xc2>
 8000910:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000914:	fab3 f383 	clz	r3, r3
 8000918:	440b      	add	r3, r1
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	2702      	movs	r7, #2
 800091e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000920:	f7ff fd68 	bl	80003f4 <HAL_GetTick>
 8000924:	4680      	mov	r8, r0
 8000926:	fa97 f3a7 	rbit	r3, r7
 800092a:	fa97 f3a7 	rbit	r3, r7
 800092e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000932:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000934:	fa97 f3a7 	rbit	r3, r7
 8000938:	fab3 f383 	clz	r3, r3
 800093c:	f003 031f 	and.w	r3, r3, #31
 8000940:	fa04 f303 	lsl.w	r3, r4, r3
 8000944:	4213      	tst	r3, r2
 8000946:	f43f aebc 	beq.w	80006c2 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800094a:	f7ff fd53 	bl	80003f4 <HAL_GetTick>
 800094e:	eba0 0008 	sub.w	r0, r0, r8
 8000952:	2802      	cmp	r0, #2
 8000954:	d9e7      	bls.n	8000926 <HAL_RCC_OscConfig+0x286>
 8000956:	e704      	b.n	8000762 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000958:	4c1d      	ldr	r4, [pc, #116]	; (80009d0 <HAL_RCC_OscConfig+0x330>)
 800095a:	69e3      	ldr	r3, [r4, #28]
 800095c:	00d9      	lsls	r1, r3, #3
 800095e:	d434      	bmi.n	80009ca <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000960:	69e3      	ldr	r3, [r4, #28]
 8000962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000966:	61e3      	str	r3, [r4, #28]
 8000968:	69e3      	ldr	r3, [r4, #28]
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000972:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000974:	4f18      	ldr	r7, [pc, #96]	; (80009d8 <HAL_RCC_OscConfig+0x338>)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	05da      	lsls	r2, r3, #23
 800097a:	d52f      	bpl.n	80009dc <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800097c:	68ab      	ldr	r3, [r5, #8]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d13d      	bne.n	80009fe <HAL_RCC_OscConfig+0x35e>
 8000982:	6a23      	ldr	r3, [r4, #32]
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800098a:	f7ff fd33 	bl	80003f4 <HAL_GetTick>
 800098e:	2702      	movs	r7, #2
 8000990:	4682      	mov	sl, r0
 8000992:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000994:	f04f 0801 	mov.w	r8, #1
 8000998:	fa97 f3a7 	rbit	r3, r7
 800099c:	fa97 f3a7 	rbit	r3, r7
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d06c      	beq.n	8000a7e <HAL_RCC_OscConfig+0x3de>
 80009a4:	6a22      	ldr	r2, [r4, #32]
 80009a6:	fa99 f3a9 	rbit	r3, r9
 80009aa:	fab3 f383 	clz	r3, r3
 80009ae:	f003 031f 	and.w	r3, r3, #31
 80009b2:	fa08 f303 	lsl.w	r3, r8, r3
 80009b6:	4213      	tst	r3, r2
 80009b8:	d058      	beq.n	8000a6c <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 80009ba:	2e00      	cmp	r6, #0
 80009bc:	f43f ae85 	beq.w	80006ca <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009c0:	69e3      	ldr	r3, [r4, #28]
 80009c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009c6:	61e3      	str	r3, [r4, #28]
 80009c8:	e67f      	b.n	80006ca <HAL_RCC_OscConfig+0x2a>
    FlagStatus       pwrclkchanged = RESET;
 80009ca:	2600      	movs	r6, #0
 80009cc:	e7d2      	b.n	8000974 <HAL_RCC_OscConfig+0x2d4>
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000
 80009d4:	10908120 	.word	0x10908120
 80009d8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80009e4:	f7ff fd06 	bl	80003f4 <HAL_GetTick>
 80009e8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	d4c5      	bmi.n	800097c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009f0:	f7ff fd00 	bl	80003f4 <HAL_GetTick>
 80009f4:	eba0 0008 	sub.w	r0, r0, r8
 80009f8:	2864      	cmp	r0, #100	; 0x64
 80009fa:	d9f6      	bls.n	80009ea <HAL_RCC_OscConfig+0x34a>
 80009fc:	e6b1      	b.n	8000762 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009fe:	bb3b      	cbnz	r3, 8000a50 <HAL_RCC_OscConfig+0x3b0>
 8000a00:	6a23      	ldr	r3, [r4, #32]
 8000a02:	f023 0301 	bic.w	r3, r3, #1
 8000a06:	6223      	str	r3, [r4, #32]
 8000a08:	6a23      	ldr	r3, [r4, #32]
 8000a0a:	f023 0304 	bic.w	r3, r3, #4
 8000a0e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a10:	f7ff fcf0 	bl	80003f4 <HAL_GetTick>
 8000a14:	2702      	movs	r7, #2
 8000a16:	4682      	mov	sl, r0
 8000a18:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a1a:	f04f 0801 	mov.w	r8, #1
 8000a1e:	fa97 f3a7 	rbit	r3, r7
 8000a22:	fa97 f3a7 	rbit	r3, r7
 8000a26:	b373      	cbz	r3, 8000a86 <HAL_RCC_OscConfig+0x3e6>
 8000a28:	6a22      	ldr	r2, [r4, #32]
 8000a2a:	fa99 f3a9 	rbit	r3, r9
 8000a2e:	fab3 f383 	clz	r3, r3
 8000a32:	f003 031f 	and.w	r3, r3, #31
 8000a36:	fa08 f303 	lsl.w	r3, r8, r3
 8000a3a:	4213      	tst	r3, r2
 8000a3c:	d0bd      	beq.n	80009ba <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a3e:	f7ff fcd9 	bl	80003f4 <HAL_GetTick>
 8000a42:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a46:	eba0 000a 	sub.w	r0, r0, sl
 8000a4a:	4298      	cmp	r0, r3
 8000a4c:	d9e7      	bls.n	8000a1e <HAL_RCC_OscConfig+0x37e>
 8000a4e:	e688      	b.n	8000762 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a50:	2b05      	cmp	r3, #5
 8000a52:	6a23      	ldr	r3, [r4, #32]
 8000a54:	d103      	bne.n	8000a5e <HAL_RCC_OscConfig+0x3be>
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	6223      	str	r3, [r4, #32]
 8000a5c:	e791      	b.n	8000982 <HAL_RCC_OscConfig+0x2e2>
 8000a5e:	f023 0301 	bic.w	r3, r3, #1
 8000a62:	6223      	str	r3, [r4, #32]
 8000a64:	6a23      	ldr	r3, [r4, #32]
 8000a66:	f023 0304 	bic.w	r3, r3, #4
 8000a6a:	e78d      	b.n	8000988 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a6c:	f7ff fcc2 	bl	80003f4 <HAL_GetTick>
 8000a70:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a74:	eba0 000a 	sub.w	r0, r0, sl
 8000a78:	4298      	cmp	r0, r3
 8000a7a:	d98d      	bls.n	8000998 <HAL_RCC_OscConfig+0x2f8>
 8000a7c:	e671      	b.n	8000762 <HAL_RCC_OscConfig+0xc2>
 8000a7e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a82:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a84:	e78f      	b.n	80009a6 <HAL_RCC_OscConfig+0x306>
 8000a86:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a8c:	e7cd      	b.n	8000a2a <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a8e:	4a51      	ldr	r2, [pc, #324]	; (8000bd4 <HAL_RCC_OscConfig+0x534>)
 8000a90:	6853      	ldr	r3, [r2, #4]
 8000a92:	f003 030c 	and.w	r3, r3, #12
 8000a96:	2b08      	cmp	r3, #8
 8000a98:	4614      	mov	r4, r2
 8000a9a:	f000 8082 	beq.w	8000ba2 <HAL_RCC_OscConfig+0x502>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a9e:	2802      	cmp	r0, #2
 8000aa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa4:	d158      	bne.n	8000b58 <HAL_RCC_OscConfig+0x4b8>
 8000aa6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000aaa:	fab3 f383 	clz	r3, r3
 8000aae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ab2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000abc:	f7ff fc9a 	bl	80003f4 <HAL_GetTick>
 8000ac0:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000ac4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ac6:	2601      	movs	r6, #1
 8000ac8:	fa97 f3a7 	rbit	r3, r7
 8000acc:	6822      	ldr	r2, [r4, #0]
 8000ace:	fa97 f3a7 	rbit	r3, r7
 8000ad2:	fab3 f383 	clz	r3, r3
 8000ad6:	f003 031f 	and.w	r3, r3, #31
 8000ada:	fa06 f303 	lsl.w	r3, r6, r3
 8000ade:	4213      	tst	r3, r2
 8000ae0:	d133      	bne.n	8000b4a <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ae2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ae4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000ae6:	f023 030f 	bic.w	r3, r3, #15
 8000aea:	4313      	orrs	r3, r2
 8000aec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000aee:	e9d5 1307 	ldrd	r1, r3, [r5, #28]
 8000af2:	6862      	ldr	r2, [r4, #4]
 8000af4:	430b      	orrs	r3, r1
 8000af6:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000afa:	4313      	orrs	r3, r2
 8000afc:	6063      	str	r3, [r4, #4]
 8000afe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b02:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000b06:	fab3 f383 	clz	r3, r3
 8000b0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000b18:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000b1a:	f7ff fc6b 	bl	80003f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b1e:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000b20:	4607      	mov	r7, r0
 8000b22:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b26:	6822      	ldr	r2, [r4, #0]
 8000b28:	fa95 f3a5 	rbit	r3, r5
 8000b2c:	fab3 f383 	clz	r3, r3
 8000b30:	f003 031f 	and.w	r3, r3, #31
 8000b34:	fa06 f303 	lsl.w	r3, r6, r3
 8000b38:	4213      	tst	r3, r2
 8000b3a:	f47f adca 	bne.w	80006d2 <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b3e:	f7ff fc59 	bl	80003f4 <HAL_GetTick>
 8000b42:	1bc0      	subs	r0, r0, r7
 8000b44:	2802      	cmp	r0, #2
 8000b46:	d9ec      	bls.n	8000b22 <HAL_RCC_OscConfig+0x482>
 8000b48:	e60b      	b.n	8000762 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4a:	f7ff fc53 	bl	80003f4 <HAL_GetTick>
 8000b4e:	eba0 0008 	sub.w	r0, r0, r8
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d9b8      	bls.n	8000ac8 <HAL_RCC_OscConfig+0x428>
 8000b56:	e604      	b.n	8000762 <HAL_RCC_OscConfig+0xc2>
 8000b58:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000b5c:	fab3 f383 	clz	r3, r3
 8000b60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b6e:	f7ff fc41 	bl	80003f4 <HAL_GetTick>
 8000b72:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000b76:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b78:	2601      	movs	r6, #1
 8000b7a:	fa95 f3a5 	rbit	r3, r5
 8000b7e:	6822      	ldr	r2, [r4, #0]
 8000b80:	fa95 f3a5 	rbit	r3, r5
 8000b84:	fab3 f383 	clz	r3, r3
 8000b88:	f003 031f 	and.w	r3, r3, #31
 8000b8c:	fa06 f303 	lsl.w	r3, r6, r3
 8000b90:	4213      	tst	r3, r2
 8000b92:	f43f ad9e 	beq.w	80006d2 <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b96:	f7ff fc2d 	bl	80003f4 <HAL_GetTick>
 8000b9a:	1bc0      	subs	r0, r0, r7
 8000b9c:	2802      	cmp	r0, #2
 8000b9e:	d9ec      	bls.n	8000b7a <HAL_RCC_OscConfig+0x4da>
 8000ba0:	e5df      	b.n	8000762 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ba2:	2801      	cmp	r0, #1
 8000ba4:	f43f adde 	beq.w	8000764 <HAL_RCC_OscConfig+0xc4>
        pll_config = RCC->CFGR;
 8000ba8:	6853      	ldr	r3, [r2, #4]
        pll_config2 = RCC->CFGR2;
 8000baa:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000bac:	69ea      	ldr	r2, [r5, #28]
 8000bae:	f403 31c0 	and.w	r1, r3, #98304	; 0x18000
 8000bb2:	4291      	cmp	r1, r2
 8000bb4:	f47f ad78 	bne.w	80006a8 <HAL_RCC_OscConfig+0x8>
 8000bb8:	6a2a      	ldr	r2, [r5, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8000bba:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	f47f ad72 	bne.w	80006a8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8000bc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8000bc6:	f000 000f 	and.w	r0, r0, #15
    return HAL_ERROR;
 8000bca:	1ac0      	subs	r0, r0, r3
 8000bcc:	bf18      	it	ne
 8000bce:	2001      	movne	r0, #1
 8000bd0:	e5c8      	b.n	8000764 <HAL_RCC_OscConfig+0xc4>
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000bd8:	4911      	ldr	r1, [pc, #68]	; (8000c20 <HAL_RCC_GetSysClockFreq+0x48>)
 8000bda:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000bdc:	f003 020c 	and.w	r2, r3, #12
 8000be0:	2a08      	cmp	r2, #8
{
 8000be2:	b510      	push	{r4, lr}
  switch (tmpreg & RCC_CFGR_SWS)
 8000be4:	d11a      	bne.n	8000c1c <HAL_RCC_GetSysClockFreq+0x44>
 8000be6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000bea:	fa92 f2a2 	rbit	r2, r2
 8000bee:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000bf0:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000bf4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000bf6:	fa90 f0a0 	rbit	r0, r0
 8000bfa:	4c0a      	ldr	r4, [pc, #40]	; (8000c24 <HAL_RCC_GetSysClockFreq+0x4c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000bfc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000c00:	fab0 f080 	clz	r0, r0
 8000c04:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000c08:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000c0a:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000c0c:	4423      	add	r3, r4
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000c10:	5c61      	ldrb	r1, [r4, r1]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000c12:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000c16:	7c18      	ldrb	r0, [r3, #16]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000c18:	4348      	muls	r0, r1
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c1a:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <HAL_RCC_GetSysClockFreq+0x50>)
  return sysclockfreq;
 8000c1e:	e7fc      	b.n	8000c1a <HAL_RCC_GetSysClockFreq+0x42>
 8000c20:	40021000 	.word	0x40021000
 8000c24:	08002738 	.word	0x08002738
 8000c28:	007a1200 	.word	0x007a1200

08000c2c <HAL_RCC_ClockConfig>:
{
 8000c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c30:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c32:	4604      	mov	r4, r0
 8000c34:	b910      	cbnz	r0, 8000c3c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c36:	2001      	movs	r0, #1
}
 8000c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c3c:	4a4c      	ldr	r2, [pc, #304]	; (8000d70 <HAL_RCC_ClockConfig+0x144>)
 8000c3e:	6813      	ldr	r3, [r2, #0]
 8000c40:	f003 0307 	and.w	r3, r3, #7
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d32e      	bcc.n	8000ca6 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c48:	6822      	ldr	r2, [r4, #0]
 8000c4a:	0791      	lsls	r1, r2, #30
 8000c4c:	d436      	bmi.n	8000cbc <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c4e:	07d2      	lsls	r2, r2, #31
 8000c50:	d43c      	bmi.n	8000ccc <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c52:	4a47      	ldr	r2, [pc, #284]	; (8000d70 <HAL_RCC_ClockConfig+0x144>)
 8000c54:	6813      	ldr	r3, [r2, #0]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	42ab      	cmp	r3, r5
 8000c5c:	d874      	bhi.n	8000d48 <HAL_RCC_ClockConfig+0x11c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c5e:	6822      	ldr	r2, [r4, #0]
 8000c60:	4d44      	ldr	r5, [pc, #272]	; (8000d74 <HAL_RCC_ClockConfig+0x148>)
 8000c62:	f012 0f04 	tst.w	r2, #4
 8000c66:	d17b      	bne.n	8000d60 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c68:	0713      	lsls	r3, r2, #28
 8000c6a:	d506      	bpl.n	8000c7a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c6c:	686b      	ldr	r3, [r5, #4]
 8000c6e:	6922      	ldr	r2, [r4, #16]
 8000c70:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c74:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c78:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000c7a:	f7ff ffad 	bl	8000bd8 <HAL_RCC_GetSysClockFreq>
 8000c7e:	686b      	ldr	r3, [r5, #4]
 8000c80:	22f0      	movs	r2, #240	; 0xf0
 8000c82:	fa92 f2a2 	rbit	r2, r2
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c8e:	40d3      	lsrs	r3, r2
 8000c90:	4a39      	ldr	r2, [pc, #228]	; (8000d78 <HAL_RCC_ClockConfig+0x14c>)
 8000c92:	5cd3      	ldrb	r3, [r2, r3]
 8000c94:	40d8      	lsrs	r0, r3
 8000c96:	4b39      	ldr	r3, [pc, #228]	; (8000d7c <HAL_RCC_ClockConfig+0x150>)
 8000c98:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000c9a:	4b39      	ldr	r3, [pc, #228]	; (8000d80 <HAL_RCC_ClockConfig+0x154>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	f7ff fb69 	bl	8000374 <HAL_InitTick>
  return HAL_OK;
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	e7c8      	b.n	8000c38 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ca6:	6813      	ldr	r3, [r2, #0]
 8000ca8:	f023 0307 	bic.w	r3, r3, #7
 8000cac:	430b      	orrs	r3, r1
 8000cae:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cb0:	6813      	ldr	r3, [r2, #0]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d1bd      	bne.n	8000c36 <HAL_RCC_ClockConfig+0xa>
 8000cba:	e7c5      	b.n	8000c48 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cbc:	492d      	ldr	r1, [pc, #180]	; (8000d74 <HAL_RCC_ClockConfig+0x148>)
 8000cbe:	68a0      	ldr	r0, [r4, #8]
 8000cc0:	684b      	ldr	r3, [r1, #4]
 8000cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000cc6:	4303      	orrs	r3, r0
 8000cc8:	604b      	str	r3, [r1, #4]
 8000cca:	e7c0      	b.n	8000c4e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ccc:	6862      	ldr	r2, [r4, #4]
 8000cce:	4e29      	ldr	r6, [pc, #164]	; (8000d74 <HAL_RCC_ClockConfig+0x148>)
 8000cd0:	2a01      	cmp	r2, #1
 8000cd2:	d126      	bne.n	8000d22 <HAL_RCC_ClockConfig+0xf6>
 8000cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cd8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cdc:	6831      	ldr	r1, [r6, #0]
 8000cde:	fa93 f3a3 	rbit	r3, r3
 8000ce2:	fab3 f383 	clz	r3, r3
 8000ce6:	f003 031f 	and.w	r3, r3, #31
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf0:	d0a1      	beq.n	8000c36 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cf2:	6873      	ldr	r3, [r6, #4]
 8000cf4:	f023 0303 	bic.w	r3, r3, #3
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000cfc:	f7ff fb7a 	bl	80003f4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d00:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d04:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d06:	6873      	ldr	r3, [r6, #4]
 8000d08:	6862      	ldr	r2, [r4, #4]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
 8000d0e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d12:	d09e      	beq.n	8000c52 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d14:	f7ff fb6e 	bl	80003f4 <HAL_GetTick>
 8000d18:	1bc0      	subs	r0, r0, r7
 8000d1a:	4540      	cmp	r0, r8
 8000d1c:	d9f3      	bls.n	8000d06 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000d1e:	2003      	movs	r0, #3
 8000d20:	e78a      	b.n	8000c38 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d22:	2a02      	cmp	r2, #2
 8000d24:	bf0c      	ite	eq
 8000d26:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000d2a:	2302      	movne	r3, #2
 8000d2c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d30:	6830      	ldr	r0, [r6, #0]
 8000d32:	fa93 f3a3 	rbit	r3, r3
 8000d36:	fab3 f383 	clz	r3, r3
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	2101      	movs	r1, #1
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	4203      	tst	r3, r0
 8000d46:	e7d3      	b.n	8000cf0 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d48:	6813      	ldr	r3, [r2, #0]
 8000d4a:	f023 0307 	bic.w	r3, r3, #7
 8000d4e:	432b      	orrs	r3, r5
 8000d50:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d52:	6813      	ldr	r3, [r2, #0]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	42ab      	cmp	r3, r5
 8000d5a:	f47f af6c 	bne.w	8000c36 <HAL_RCC_ClockConfig+0xa>
 8000d5e:	e77e      	b.n	8000c5e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d60:	686b      	ldr	r3, [r5, #4]
 8000d62:	68e1      	ldr	r1, [r4, #12]
 8000d64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	606b      	str	r3, [r5, #4]
 8000d6c:	e77c      	b.n	8000c68 <HAL_RCC_ClockConfig+0x3c>
 8000d6e:	bf00      	nop
 8000d70:	40022000 	.word	0x40022000
 8000d74:	40021000 	.word	0x40021000
 8000d78:	08002720 	.word	0x08002720
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	20000014 	.word	0x20000014

08000d84 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	fa92 f2a2 	rbit	r2, r2
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d98:	40d3      	lsrs	r3, r2
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_RCC_GetPCLK1Freq+0x28>)
 8000d9c:	5cd3      	ldrb	r3, [r2, r3]
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000da0:	6810      	ldr	r0, [r2, #0]
}    
 8000da2:	40d8      	lsrs	r0, r3
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000
 8000dac:	08002730 	.word	0x08002730
 8000db0:	2000000c 	.word	0x2000000c

08000db4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000db6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	fa92 f2a2 	rbit	r2, r2
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000dc8:	40d3      	lsrs	r3, r2
 8000dca:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_RCC_GetPCLK2Freq+0x28>)
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000dd0:	6810      	ldr	r0, [r2, #0]
} 
 8000dd2:	40d8      	lsrs	r0, r3
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	08002730 	.word	0x08002730
 8000de0:	2000000c 	.word	0x2000000c

08000de4 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000de4:	6803      	ldr	r3, [r0, #0]
{
 8000de6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000dea:	03df      	lsls	r7, r3, #15
{
 8000dec:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000dee:	d523      	bpl.n	8000e38 <HAL_RCCEx_PeriphCLKConfig+0x54>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df0:	4d9b      	ldr	r5, [pc, #620]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000df2:	69eb      	ldr	r3, [r5, #28]
 8000df4:	00de      	lsls	r6, r3, #3
 8000df6:	f100 80d7 	bmi.w	8000fa8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	69eb      	ldr	r3, [r5, #28]
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	61eb      	str	r3, [r5, #28]
 8000e02:	69eb      	ldr	r3, [r5, #28]
 8000e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e0c:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0e:	4f95      	ldr	r7, [pc, #596]	; (8001064 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	05d8      	lsls	r0, r3, #23
 8000e14:	f140 80ca 	bpl.w	8000fac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000e18:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e1a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000e1e:	f040 80da 	bne.w	8000fd6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000e22:	6a2b      	ldr	r3, [r5, #32]
 8000e24:	6862      	ldr	r2, [r4, #4]
 8000e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e2e:	b11e      	cbz	r6, 8000e38 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e30:	69eb      	ldr	r3, [r5, #28]
 8000e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e36:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000e38:	6820      	ldr	r0, [r4, #0]
 8000e3a:	07c3      	lsls	r3, r0, #31
 8000e3c:	d506      	bpl.n	8000e4c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000e3e:	4a88      	ldr	r2, [pc, #544]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e40:	68a1      	ldr	r1, [r4, #8]
 8000e42:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e44:	f023 0303 	bic.w	r3, r3, #3
 8000e48:	430b      	orrs	r3, r1
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000e4c:	0787      	lsls	r7, r0, #30
 8000e4e:	d506      	bpl.n	8000e5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000e50:	4a83      	ldr	r2, [pc, #524]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e52:	68e1      	ldr	r1, [r4, #12]
 8000e54:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e56:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e5a:	430b      	orrs	r3, r1
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000e5e:	0746      	lsls	r6, r0, #29
 8000e60:	d506      	bpl.n	8000e70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000e62:	4a7f      	ldr	r2, [pc, #508]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e64:	6921      	ldr	r1, [r4, #16]
 8000e66:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e68:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000e70:	0685      	lsls	r5, r0, #26
 8000e72:	d506      	bpl.n	8000e82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000e74:	4a7a      	ldr	r2, [pc, #488]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e76:	69e1      	ldr	r1, [r4, #28]
 8000e78:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e7a:	f023 0310 	bic.w	r3, r3, #16
 8000e7e:	430b      	orrs	r3, r1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000e82:	0381      	lsls	r1, r0, #14
 8000e84:	d506      	bpl.n	8000e94 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000e86:	4a76      	ldr	r2, [pc, #472]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e88:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000e8a:	6853      	ldr	r3, [r2, #4]
 8000e8c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e90:	430b      	orrs	r3, r1
 8000e92:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000e94:	0642      	lsls	r2, r0, #25
 8000e96:	d506      	bpl.n	8000ea6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000e98:	4a71      	ldr	r2, [pc, #452]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e9a:	6a21      	ldr	r1, [r4, #32]
 8000e9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e9e:	f023 0320 	bic.w	r3, r3, #32
 8000ea2:	430b      	orrs	r3, r1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000ea6:	0343      	lsls	r3, r0, #13
 8000ea8:	d506      	bpl.n	8000eb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000eaa:	4a6d      	ldr	r2, [pc, #436]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000eac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000eae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000eb4:	430b      	orrs	r3, r1
 8000eb6:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000eb8:	0707      	lsls	r7, r0, #28
 8000eba:	d506      	bpl.n	8000eca <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000ebc:	4a68      	ldr	r2, [pc, #416]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ebe:	6961      	ldr	r1, [r4, #20]
 8000ec0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ec2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000ec6:	430b      	orrs	r3, r1
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000eca:	06c6      	lsls	r6, r0, #27
 8000ecc:	d506      	bpl.n	8000edc <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000ece:	4a64      	ldr	r2, [pc, #400]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ed0:	69a1      	ldr	r1, [r4, #24]
 8000ed2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ed4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000edc:	0585      	lsls	r5, r0, #22
 8000ede:	d506      	bpl.n	8000eee <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000ee0:	4a5f      	ldr	r2, [pc, #380]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ee2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000ee4:	6853      	ldr	r3, [r2, #4]
 8000ee6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000eea:	430b      	orrs	r3, r1
 8000eec:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000eee:	0601      	lsls	r1, r0, #24
 8000ef0:	d506      	bpl.n	8000f00 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000ef2:	4a5b      	ldr	r2, [pc, #364]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ef4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000ef6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000ef8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000efc:	430b      	orrs	r3, r1
 8000efe:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8000f00:	05c2      	lsls	r2, r0, #23
 8000f02:	d506      	bpl.n	8000f12 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8000f04:	4a56      	ldr	r2, [pc, #344]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000f0a:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8000f0e:	430b      	orrs	r3, r1
 8000f10:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000f12:	04c3      	lsls	r3, r0, #19
 8000f14:	d506      	bpl.n	8000f24 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000f16:	4a52      	ldr	r2, [pc, #328]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f20:	430b      	orrs	r3, r1
 8000f22:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8000f24:	0487      	lsls	r7, r0, #18
 8000f26:	d506      	bpl.n	8000f36 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8000f28:	4a4d      	ldr	r2, [pc, #308]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000f2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f32:	430b      	orrs	r3, r1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8000f36:	02c6      	lsls	r6, r0, #11
 8000f38:	d506      	bpl.n	8000f48 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8000f3a:	4a49      	ldr	r2, [pc, #292]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f3c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000f3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f44:	430b      	orrs	r3, r1
 8000f46:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8000f48:	0285      	lsls	r5, r0, #10
 8000f4a:	d506      	bpl.n	8000f5a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8000f4c:	4a44      	ldr	r2, [pc, #272]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f4e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000f50:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f52:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000f56:	430b      	orrs	r3, r1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8000f5a:	0241      	lsls	r1, r0, #9
 8000f5c:	d506      	bpl.n	8000f6c <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8000f5e:	4a40      	ldr	r2, [pc, #256]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f60:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000f62:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8000f6c:	0202      	lsls	r2, r0, #8
 8000f6e:	d506      	bpl.n	8000f7e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8000f70:	4a3b      	ldr	r2, [pc, #236]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f72:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000f74:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8000f7e:	01c3      	lsls	r3, r0, #7
 8000f80:	d506      	bpl.n	8000f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8000f82:	4a37      	ldr	r2, [pc, #220]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f84:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000f86:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8000f90:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8000f94:	d01c      	beq.n	8000fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8000f96:	4a32      	ldr	r2, [pc, #200]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f98:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000f9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	e013      	b.n	8000fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  FlagStatus       pwrclkchanged = RESET;
 8000fa8:	2600      	movs	r6, #0
 8000faa:	e730      	b.n	8000e0e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000fb4:	f7ff fa1e 	bl	80003f4 <HAL_GetTick>
 8000fb8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	05d9      	lsls	r1, r3, #23
 8000fbe:	f53f af2b 	bmi.w	8000e18 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc2:	f7ff fa17 	bl	80003f4 <HAL_GetTick>
 8000fc6:	eba0 0008 	sub.w	r0, r0, r8
 8000fca:	2864      	cmp	r0, #100	; 0x64
 8000fcc:	d9f5      	bls.n	8000fba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8000fce:	2003      	movs	r0, #3
}
 8000fd0:	b002      	add	sp, #8
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000fd6:	6862      	ldr	r2, [r4, #4]
 8000fd8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f43f af20 	beq.w	8000e22 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000fe2:	6a29      	ldr	r1, [r5, #32]
 8000fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe8:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000fec:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ff0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8001068 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	4462      	add	r2, ip
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	2701      	movs	r7, #1
 8000ffe:	6017      	str	r7, [r2, #0]
 8001000:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	4463      	add	r3, ip
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001010:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001012:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001014:	f57f af05 	bpl.w	8000e22 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001018:	f7ff f9ec 	bl	80003f4 <HAL_GetTick>
 800101c:	f04f 0802 	mov.w	r8, #2
 8001020:	4682      	mov	sl, r0
 8001022:	46c1      	mov	r9, r8
 8001024:	fa98 f3a8 	rbit	r3, r8
 8001028:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800102c:	b1a3      	cbz	r3, 8001058 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800102e:	6a2a      	ldr	r2, [r5, #32]
 8001030:	fa99 f3a9 	rbit	r3, r9
 8001034:	fab3 f383 	clz	r3, r3
 8001038:	f003 031f 	and.w	r3, r3, #31
 800103c:	fa07 f303 	lsl.w	r3, r7, r3
 8001040:	4213      	tst	r3, r2
 8001042:	f47f aeee 	bne.w	8000e22 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001046:	f7ff f9d5 	bl	80003f4 <HAL_GetTick>
 800104a:	f241 3388 	movw	r3, #5000	; 0x1388
 800104e:	eba0 000a 	sub.w	r0, r0, sl
 8001052:	4298      	cmp	r0, r3
 8001054:	d9e6      	bls.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001056:	e7ba      	b.n	8000fce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001058:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800105c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800105e:	e7e7      	b.n	8001030 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8001060:	40021000 	.word	0x40021000
 8001064:	40007000 	.word	0x40007000
 8001068:	10908100 	.word	0x10908100

0800106c <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800106c:	6803      	ldr	r3, [r0, #0]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001074:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001076:	6842      	ldr	r2, [r0, #4]
 8001078:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800107c:	d10a      	bne.n	8001094 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 800107e:	6882      	ldr	r2, [r0, #8]
 8001080:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001084:	d002      	beq.n	800108c <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001086:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800108a:	d103      	bne.n	8001094 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001092:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001094:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001096:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800109a:	d107      	bne.n	80010ac <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80010ac:	2301      	movs	r3, #1
 80010ae:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80010b2:	2300      	movs	r3, #0
 80010b4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      count--;
    }
  }

  return HAL_OK;
}
 80010b8:	2003      	movs	r0, #3
 80010ba:	4770      	bx	lr

080010bc <SPI_WaitFlagStateUntilTimeout>:
{
 80010bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80010c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80010c2:	461e      	mov	r6, r3
 80010c4:	4688      	mov	r8, r1
 80010c6:	4617      	mov	r7, r2
 80010c8:	4605      	mov	r5, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80010ca:	f7ff f993 	bl	80003f4 <HAL_GetTick>
 80010ce:	4434      	add	r4, r6
 80010d0:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80010d2:	f7ff f98f 	bl	80003f4 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <SPI_WaitFlagStateUntilTimeout+0x6c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 80010de:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80010e0:	4363      	muls	r3, r4
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80010e2:	682a      	ldr	r2, [r5, #0]
      count--;
 80010e4:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80010e6:	6893      	ldr	r3, [r2, #8]
 80010e8:	ea38 0303 	bics.w	r3, r8, r3
 80010ec:	bf0c      	ite	eq
 80010ee:	2301      	moveq	r3, #1
 80010f0:	2300      	movne	r3, #0
 80010f2:	42bb      	cmp	r3, r7
 80010f4:	d103      	bne.n	80010fe <SPI_WaitFlagStateUntilTimeout+0x42>
}
 80010f6:	2000      	movs	r0, #0
 80010f8:	b003      	add	sp, #12
 80010fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80010fe:	1c73      	adds	r3, r6, #1
 8001100:	d0f1      	beq.n	80010e6 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001102:	f7ff f977 	bl	80003f4 <HAL_GetTick>
 8001106:	eba0 0009 	sub.w	r0, r0, r9
 800110a:	42a0      	cmp	r0, r4
 800110c:	d305      	bcc.n	800111a <SPI_WaitFlagStateUntilTimeout+0x5e>
 800110e:	4628      	mov	r0, r5
}
 8001110:	b003      	add	sp, #12
 8001112:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001116:	f7ff bfa9 	b.w	800106c <SPI_WaitFifoStateUntilTimeout.part.1>
      if(count == 0U)
 800111a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800111c:	2b00      	cmp	r3, #0
      count--;
 800111e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001120:	bf08      	it	eq
 8001122:	2400      	moveq	r4, #0
      count--;
 8001124:	3b01      	subs	r3, #1
 8001126:	e7dc      	b.n	80010e2 <SPI_WaitFlagStateUntilTimeout+0x26>
 8001128:	2000000c 	.word	0x2000000c

0800112c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800112c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001130:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001132:	4698      	mov	r8, r3
 8001134:	4615      	mov	r5, r2
 8001136:	460e      	mov	r6, r1
 8001138:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800113a:	f7ff f95b 	bl	80003f4 <HAL_GetTick>
 800113e:	4444      	add	r4, r8
 8001140:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8001142:	f7ff f957 	bl	80003f4 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <SPI_WaitFifoStateUntilTimeout+0x74>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	2323      	movs	r3, #35	; 0x23
 800114c:	4353      	muls	r3, r2
 800114e:	0d1b      	lsrs	r3, r3, #20
  tmp_tickstart = HAL_GetTick();
 8001150:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001152:	4363      	muls	r3, r4

  while ((hspi->Instance->SR & Fifo) != State)
 8001154:	683a      	ldr	r2, [r7, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }      
      count--;
 8001156:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8001158:	6893      	ldr	r3, [r2, #8]
 800115a:	4033      	ands	r3, r6
 800115c:	42ab      	cmp	r3, r5
 800115e:	d103      	bne.n	8001168 <SPI_WaitFifoStateUntilTimeout+0x3c>
    }
  }

  return HAL_OK;
}
 8001160:	2000      	movs	r0, #0
 8001162:	b003      	add	sp, #12
 8001164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001168:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
 800116c:	d101      	bne.n	8001172 <SPI_WaitFifoStateUntilTimeout+0x46>
 800116e:	b905      	cbnz	r5, 8001172 <SPI_WaitFifoStateUntilTimeout+0x46>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001170:	7b13      	ldrb	r3, [r2, #12]
    if (Timeout != HAL_MAX_DELAY)
 8001172:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001176:	d0ef      	beq.n	8001158 <SPI_WaitFifoStateUntilTimeout+0x2c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001178:	f7ff f93c 	bl	80003f4 <HAL_GetTick>
 800117c:	eba0 0009 	sub.w	r0, r0, r9
 8001180:	4284      	cmp	r4, r0
 8001182:	d805      	bhi.n	8001190 <SPI_WaitFifoStateUntilTimeout+0x64>
 8001184:	4638      	mov	r0, r7
}
 8001186:	b003      	add	sp, #12
 8001188:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800118c:	f7ff bf6e 	b.w	800106c <SPI_WaitFifoStateUntilTimeout.part.1>
      if(count == 0U)
 8001190:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001192:	2b00      	cmp	r3, #0
      count--;
 8001194:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001196:	bf08      	it	eq
 8001198:	2400      	moveq	r4, #0
      count--;
 800119a:	3b01      	subs	r3, #1
 800119c:	e7da      	b.n	8001154 <SPI_WaitFifoStateUntilTimeout+0x28>
 800119e:	bf00      	nop
 80011a0:	2000000c 	.word	0x2000000c

080011a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80011a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80011a6:	460b      	mov	r3, r1
 80011a8:	9200      	str	r2, [sp, #0]
{
 80011aa:	460d      	mov	r5, r1
 80011ac:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80011ae:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80011b2:	2200      	movs	r2, #0
{
 80011b4:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80011b6:	f7ff ffb9 	bl	800112c <SPI_WaitFifoStateUntilTimeout>
 80011ba:	4602      	mov	r2, r0
 80011bc:	b128      	cbz	r0, 80011ca <SPI_EndRxTxTransaction+0x26>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80011be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80011c0:	f043 0320 	orr.w	r3, r3, #32
 80011c4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80011c6:	2003      	movs	r0, #3
 80011c8:	e011      	b.n	80011ee <SPI_EndRxTxTransaction+0x4a>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80011ca:	9600      	str	r6, [sp, #0]
 80011cc:	462b      	mov	r3, r5
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff ff73 	bl	80010bc <SPI_WaitFlagStateUntilTimeout>
 80011d6:	4602      	mov	r2, r0
 80011d8:	2800      	cmp	r0, #0
 80011da:	d1f0      	bne.n	80011be <SPI_EndRxTxTransaction+0x1a>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80011dc:	9600      	str	r6, [sp, #0]
 80011de:	462b      	mov	r3, r5
 80011e0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80011e4:	4620      	mov	r0, r4
 80011e6:	f7ff ffa1 	bl	800112c <SPI_WaitFifoStateUntilTimeout>
 80011ea:	2800      	cmp	r0, #0
 80011ec:	d1e7      	bne.n	80011be <SPI_EndRxTxTransaction+0x1a>
  }

  return HAL_OK;
}
 80011ee:	b002      	add	sp, #8
 80011f0:	bd70      	pop	{r4, r5, r6, pc}

080011f2 <HAL_SPI_Init>:
{
 80011f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 80011f4:	4604      	mov	r4, r0
 80011f6:	2800      	cmp	r0, #0
 80011f8:	d077      	beq.n	80012ea <HAL_SPI_Init+0xf8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80011fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d170      	bne.n	80012e2 <HAL_SPI_Init+0xf0>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001200:	6842      	ldr	r2, [r0, #4]
 8001202:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001206:	d000      	beq.n	800120a <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001208:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800120a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800120e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001212:	b923      	cbnz	r3, 800121e <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8001214:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001218:	4620      	mov	r0, r4
 800121a:	f000 fd9d 	bl	8001d58 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800121e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001220:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001222:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001226:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001228:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800122a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800122e:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001232:	600b      	str	r3, [r1, #0]
 8001234:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001238:	d859      	bhi.n	80012ee <HAL_SPI_Init+0xfc>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800123a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800123e:	d000      	beq.n	8001242 <HAL_SPI_Init+0x50>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001240:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001242:	6863      	ldr	r3, [r4, #4]
 8001244:	68a7      	ldr	r7, [r4, #8]
 8001246:	69a2      	ldr	r2, [r4, #24]
 8001248:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800124a:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800124e:	f407 4704 	and.w	r7, r7, #33792	; 0x8400
 8001252:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001256:	433b      	orrs	r3, r7
 8001258:	6927      	ldr	r7, [r4, #16]
 800125a:	f007 0702 	and.w	r7, r7, #2
 800125e:	433b      	orrs	r3, r7
 8001260:	6967      	ldr	r7, [r4, #20]
 8001262:	f007 0701 	and.w	r7, r7, #1
 8001266:	433b      	orrs	r3, r7
 8001268:	f402 7700 	and.w	r7, r2, #512	; 0x200
 800126c:	433b      	orrs	r3, r7
 800126e:	69e7      	ldr	r7, [r4, #28]
 8001270:	f007 0738 	and.w	r7, r7, #56	; 0x38
 8001274:	433b      	orrs	r3, r7
 8001276:	6a27      	ldr	r7, [r4, #32]
 8001278:	f007 0780 	and.w	r7, r7, #128	; 0x80
 800127c:	433b      	orrs	r3, r7
 800127e:	f406 5700 	and.w	r7, r6, #8192	; 0x2000
 8001282:	433b      	orrs	r3, r7
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001284:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001288:	600b      	str	r3, [r1, #0]
 800128a:	f405 6770 	and.w	r7, r5, #3840	; 0xf00
 800128e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001290:	ea4f 4612 	mov.w	r6, r2, lsr #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001294:	d12f      	bne.n	80012f6 <HAL_SPI_Init+0x104>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001296:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001298:	b92a      	cbnz	r2, 80012a6 <HAL_SPI_Init+0xb4>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800129a:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800129e:	bf8c      	ite	hi
 80012a0:	2202      	movhi	r2, #2
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80012a2:	2201      	movls	r2, #1
 80012a4:	6322      	str	r2, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80012a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80012a8:	2a02      	cmp	r2, #2
 80012aa:	d130      	bne.n	800130e <HAL_SPI_Init+0x11c>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80012ac:	680d      	ldr	r5, [r1, #0]
 80012ae:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 80012b2:	600d      	str	r5, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	f00c 0510 	and.w	r5, ip, #16
 80012bc:	432b      	orrs	r3, r5
 80012be:	433b      	orrs	r3, r7
 80012c0:	f006 0204 	and.w	r2, r6, #4
 80012c4:	431a      	orrs	r2, r3
 80012c6:	4310      	orrs	r0, r2
 80012c8:	6048      	str	r0, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80012ca:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80012cc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012ce:	69cb      	ldr	r3, [r1, #28]
 80012d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012d4:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012d6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80012d8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012da:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80012dc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80012e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e2:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80012e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80012e8:	e78f      	b.n	800120a <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80012ea:	2001      	movs	r0, #1
 80012ec:	e7f8      	b.n	80012e0 <HAL_SPI_Init+0xee>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80012ee:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80012f0:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 80012f4:	e7a3      	b.n	800123e <HAL_SPI_Init+0x4c>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80012f6:	f00c 0210 	and.w	r2, ip, #16
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	4313      	orrs	r3, r2
 8001300:	433b      	orrs	r3, r7
 8001302:	f006 0204 	and.w	r2, r6, #4
 8001306:	431a      	orrs	r2, r3
 8001308:	4310      	orrs	r0, r2
 800130a:	6048      	str	r0, [r1, #4]
 800130c:	e7df      	b.n	80012ce <HAL_SPI_Init+0xdc>
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	f00c 0210 	and.w	r2, ip, #16
 8001316:	4313      	orrs	r3, r2
 8001318:	e7d1      	b.n	80012be <HAL_SPI_Init+0xcc>

0800131a <HAL_SPI_TransmitReceive>:
{
 800131a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800131e:	4698      	mov	r8, r3
  __HAL_LOCK(hspi);
 8001320:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8001324:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8001326:	2b01      	cmp	r3, #1
{
 8001328:	4604      	mov	r4, r0
 800132a:	460d      	mov	r5, r1
 800132c:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 800132e:	f000 81a2 	beq.w	8001676 <HAL_SPI_TransmitReceive+0x35c>
 8001332:	2301      	movs	r3, #1
 8001334:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8001338:	f7ff f85c 	bl	80003f4 <HAL_GetTick>
  tmp_state           = hspi->State;
 800133c:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 8001340:	4607      	mov	r7, r0
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8001342:	e9d4 0e00 	ldrd	r0, lr, [r4]
  tmp_state           = hspi->State;
 8001346:	b2d2      	uxtb	r2, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001348:	2a01      	cmp	r2, #1
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800134a:	f8d0 c000 	ldr.w	ip, [r0]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 800134e:	6841      	ldr	r1, [r0, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001350:	d00a      	beq.n	8001368 <HAL_SPI_TransmitReceive+0x4e>
 8001352:	f5be 7f82 	cmp.w	lr, #260	; 0x104
 8001356:	f040 818c 	bne.w	8001672 <HAL_SPI_TransmitReceive+0x358>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800135a:	68a3      	ldr	r3, [r4, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	f040 8188 	bne.w	8001672 <HAL_SPI_TransmitReceive+0x358>
 8001362:	2a04      	cmp	r2, #4
 8001364:	f040 8185 	bne.w	8001672 <HAL_SPI_TransmitReceive+0x358>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001368:	2d00      	cmp	r5, #0
 800136a:	f000 816f 	beq.w	800164c <HAL_SPI_TransmitReceive+0x332>
 800136e:	f1b9 0f00 	cmp.w	r9, #0
 8001372:	f000 816b 	beq.w	800164c <HAL_SPI_TransmitReceive+0x332>
 8001376:	f1b8 0f00 	cmp.w	r8, #0
 800137a:	f000 8167 	beq.w	800164c <HAL_SPI_TransmitReceive+0x332>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800137e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001382:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001386:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001388:	bf1c      	itt	ne
 800138a:	2305      	movne	r3, #5
 800138c:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001390:	2300      	movs	r3, #0
 8001392:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8001394:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001398:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 800139a:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800139e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 80013a2:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80013a6:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80013a8:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80013ac:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80013b0:	d107      	bne.n	80013c2 <HAL_SPI_TransmitReceive+0xa8>
    SPI_RESET_CRC(hspi);
 80013b2:	6803      	ldr	r3, [r0, #0]
 80013b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013b8:	6003      	str	r3, [r0, #0]
 80013ba:	6803      	ldr	r3, [r0, #0]
 80013bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013c0:	6003      	str	r3, [r0, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80013c2:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80013c4:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80013c6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 80013ca:	d802      	bhi.n	80013d2 <HAL_SPI_TransmitReceive+0xb8>
 80013cc:	f1b8 0f01 	cmp.w	r8, #1
 80013d0:	d93c      	bls.n	800144c <HAL_SPI_TransmitReceive+0x132>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80013d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80013d6:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80013d8:	6803      	ldr	r3, [r0, #0]
 80013da:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80013dc:	bf5e      	ittt	pl
 80013de:	6803      	ldrpl	r3, [r0, #0]
 80013e0:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80013e4:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013e6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 80013ea:	f240 8082 	bls.w	80014f2 <HAL_SPI_TransmitReceive+0x1d8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80013ee:	f1be 0f00 	cmp.w	lr, #0
 80013f2:	d002      	beq.n	80013fa <HAL_SPI_TransmitReceive+0xe0>
 80013f4:	f1b8 0f01 	cmp.w	r8, #1
 80013f8:	d107      	bne.n	800140a <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013fa:	f835 3b02 	ldrh.w	r3, [r5], #2
 80013fe:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8001400:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001402:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001404:	3b01      	subs	r3, #1
 8001406:	b29b      	uxth	r3, r3
 8001408:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800140a:	f04f 0801 	mov.w	r8, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800140e:	f00c 0504 	and.w	r5, ip, #4
 8001412:	f001 0908 	and.w	r9, r1, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001416:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001418:	b29b      	uxth	r3, r3
 800141a:	b9d3      	cbnz	r3, 8001452 <HAL_SPI_TransmitReceive+0x138>
 800141c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001420:	b29b      	uxth	r3, r3
 8001422:	b9b3      	cbnz	r3, 8001452 <HAL_SPI_TransmitReceive+0x138>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001424:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800142a:	f040 80f8 	bne.w	800161e <HAL_SPI_TransmitReceive+0x304>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800142e:	2201      	movs	r2, #1
 8001430:	9700      	str	r7, [sp, #0]
 8001432:	4633      	mov	r3, r6
 8001434:	4611      	mov	r1, r2
 8001436:	4620      	mov	r0, r4
 8001438:	f7ff fe40 	bl	80010bc <SPI_WaitFlagStateUntilTimeout>
 800143c:	2800      	cmp	r0, #0
 800143e:	f000 80e8 	beq.w	8001612 <HAL_SPI_TransmitReceive+0x2f8>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001442:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6623      	str	r3, [r4, #96]	; 0x60
 800144a:	e029      	b.n	80014a0 <HAL_SPI_TransmitReceive+0x186>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800144c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001450:	e7c1      	b.n	80013d6 <HAL_SPI_TransmitReceive+0xbc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	0791      	lsls	r1, r2, #30
 8001458:	d507      	bpl.n	800146a <HAL_SPI_TransmitReceive+0x150>
 800145a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800145c:	b292      	uxth	r2, r2
 800145e:	b122      	cbz	r2, 800146a <HAL_SPI_TransmitReceive+0x150>
 8001460:	f1b8 0f00 	cmp.w	r8, #0
 8001464:	d127      	bne.n	80014b6 <HAL_SPI_TransmitReceive+0x19c>
        txallowed = 0U;
 8001466:	f04f 0800 	mov.w	r8, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	07d2      	lsls	r2, r2, #31
 800146e:	d510      	bpl.n	8001492 <HAL_SPI_TransmitReceive+0x178>
 8001470:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001474:	b292      	uxth	r2, r2
 8001476:	b162      	cbz	r2, 8001492 <HAL_SPI_TransmitReceive+0x178>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800147c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001480:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8001482:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001486:	3b01      	subs	r3, #1
 8001488:	b29b      	uxth	r3, r3
 800148a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800148e:	f04f 0801 	mov.w	r8, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001492:	f7fe ffaf 	bl	80003f4 <HAL_GetTick>
 8001496:	1bc0      	subs	r0, r0, r7
 8001498:	4286      	cmp	r6, r0
 800149a:	d8bc      	bhi.n	8001416 <HAL_SPI_TransmitReceive+0xfc>
 800149c:	1c73      	adds	r3, r6, #1
 800149e:	d0ba      	beq.n	8001416 <HAL_SPI_TransmitReceive+0xfc>
          errorcode = HAL_TIMEOUT;
 80014a0:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 80014a2:	2301      	movs	r3, #1
 80014a4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80014a8:	2300      	movs	r3, #0
 80014aa:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80014ae:	4628      	mov	r0, r5
 80014b0:	b003      	add	sp, #12
 80014b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80014b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80014b8:	f832 1b02 	ldrh.w	r1, [r2], #2
 80014bc:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80014be:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80014c0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80014c2:	3a01      	subs	r2, #1
 80014c4:	b292      	uxth	r2, r2
 80014c6:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80014c8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80014ca:	b292      	uxth	r2, r2
 80014cc:	2a00      	cmp	r2, #0
 80014ce:	d1ca      	bne.n	8001466 <HAL_SPI_TransmitReceive+0x14c>
 80014d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014d2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80014d6:	d1c6      	bne.n	8001466 <HAL_SPI_TransmitReceive+0x14c>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80014d8:	b935      	cbnz	r5, 80014e8 <HAL_SPI_TransmitReceive+0x1ce>
 80014da:	f1b9 0f00 	cmp.w	r9, #0
 80014de:	d003      	beq.n	80014e8 <HAL_SPI_TransmitReceive+0x1ce>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014e6:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	e7b9      	b.n	8001466 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80014f2:	f1be 0f00 	cmp.w	lr, #0
 80014f6:	d002      	beq.n	80014fe <HAL_SPI_TransmitReceive+0x1e4>
 80014f8:	f1b8 0f01 	cmp.w	r8, #1
 80014fc:	d10a      	bne.n	8001514 <HAL_SPI_TransmitReceive+0x1fa>
      if (hspi->TxXferCount > 1U)
 80014fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001500:	2b01      	cmp	r3, #1
 8001502:	d946      	bls.n	8001592 <HAL_SPI_TransmitReceive+0x278>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001504:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001508:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 800150a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800150c:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800150e:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8001510:	b29b      	uxth	r3, r3
 8001512:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001514:	2501      	movs	r5, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8001516:	f00c 0804 	and.w	r8, ip, #4
 800151a:	f001 0908 	and.w	r9, r1, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800151e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001520:	b29b      	uxth	r3, r3
 8001522:	b92b      	cbnz	r3, 8001530 <HAL_SPI_TransmitReceive+0x216>
 8001524:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001528:	b29b      	uxth	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	f43f af7a 	beq.w	8001424 <HAL_SPI_TransmitReceive+0x10a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001530:	6822      	ldr	r2, [r4, #0]
 8001532:	6893      	ldr	r3, [r2, #8]
 8001534:	0798      	lsls	r0, r3, #30
 8001536:	d504      	bpl.n	8001542 <HAL_SPI_TransmitReceive+0x228>
 8001538:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800153a:	b29b      	uxth	r3, r3
 800153c:	b10b      	cbz	r3, 8001542 <HAL_SPI_TransmitReceive+0x228>
 800153e:	bb85      	cbnz	r5, 80015a2 <HAL_SPI_TransmitReceive+0x288>
        txallowed = 0U;
 8001540:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001542:	6822      	ldr	r2, [r4, #0]
 8001544:	6893      	ldr	r3, [r2, #8]
 8001546:	07d9      	lsls	r1, r3, #31
 8001548:	d51b      	bpl.n	8001582 <HAL_SPI_TransmitReceive+0x268>
 800154a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800154e:	b29b      	uxth	r3, r3
 8001550:	b1bb      	cbz	r3, 8001582 <HAL_SPI_TransmitReceive+0x268>
        if (hspi->RxXferCount > 1U)
 8001552:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8001556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001558:	2901      	cmp	r1, #1
 800155a:	d94e      	bls.n	80015fa <HAL_SPI_TransmitReceive+0x2e0>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800155c:	68d1      	ldr	r1, [r2, #12]
 800155e:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8001562:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8001564:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001568:	3b02      	subs	r3, #2
 800156a:	b29b      	uxth	r3, r3
 800156c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8001570:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001574:	2b01      	cmp	r3, #1
 8001576:	d803      	bhi.n	8001580 <HAL_SPI_TransmitReceive+0x266>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001578:	6853      	ldr	r3, [r2, #4]
 800157a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800157e:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8001580:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001582:	f7fe ff37 	bl	80003f4 <HAL_GetTick>
 8001586:	1bc0      	subs	r0, r0, r7
 8001588:	4286      	cmp	r6, r0
 800158a:	d8c8      	bhi.n	800151e <HAL_SPI_TransmitReceive+0x204>
 800158c:	1c73      	adds	r3, r6, #1
 800158e:	d0c6      	beq.n	800151e <HAL_SPI_TransmitReceive+0x204>
 8001590:	e786      	b.n	80014a0 <HAL_SPI_TransmitReceive+0x186>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001592:	782b      	ldrb	r3, [r5, #0]
 8001594:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 8001596:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001598:	3301      	adds	r3, #1
 800159a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800159c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800159e:	3b01      	subs	r3, #1
 80015a0:	e7b6      	b.n	8001510 <HAL_SPI_TransmitReceive+0x1f6>
        if (hspi->TxXferCount > 1U)
 80015a2:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80015a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015a6:	2901      	cmp	r1, #1
 80015a8:	d91f      	bls.n	80015ea <HAL_SPI_TransmitReceive+0x2d0>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015aa:	f833 1b02 	ldrh.w	r1, [r3], #2
 80015ae:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80015b0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80015b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015b4:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80015ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1be      	bne.n	8001540 <HAL_SPI_TransmitReceive+0x226>
 80015c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015c8:	d1ba      	bne.n	8001540 <HAL_SPI_TransmitReceive+0x226>
 80015ca:	6823      	ldr	r3, [r4, #0]
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80015cc:	f1b8 0f00 	cmp.w	r8, #0
 80015d0:	d106      	bne.n	80015e0 <HAL_SPI_TransmitReceive+0x2c6>
 80015d2:	f1b9 0f00 	cmp.w	r9, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_SPI_TransmitReceive+0x2c6>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015de:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	e7aa      	b.n	8001540 <HAL_SPI_TransmitReceive+0x226>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80015ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015f0:	3301      	adds	r3, #1
 80015f2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80015f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015f6:	3b01      	subs	r3, #1
 80015f8:	e7dd      	b.n	80015b6 <HAL_SPI_TransmitReceive+0x29c>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80015fa:	7b12      	ldrb	r2, [r2, #12]
 80015fc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80015fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001600:	3301      	adds	r3, #1
 8001602:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8001604:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001608:	3b01      	subs	r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8001610:	e7b6      	b.n	8001580 <HAL_SPI_TransmitReceive+0x266>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001612:	68e2      	ldr	r2, [r4, #12]
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800161a:	d119      	bne.n	8001650 <HAL_SPI_TransmitReceive+0x336>
      READ_REG(hspi->Instance->DR);
 800161c:	68db      	ldr	r3, [r3, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800161e:	6822      	ldr	r2, [r4, #0]
 8001620:	6895      	ldr	r5, [r2, #8]
 8001622:	f015 0510 	ands.w	r5, r5, #16
 8001626:	d007      	beq.n	8001638 <HAL_SPI_TransmitReceive+0x31e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001628:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8001630:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001634:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8001636:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001638:	463a      	mov	r2, r7
 800163a:	4631      	mov	r1, r6
 800163c:	4620      	mov	r0, r4
 800163e:	f7ff fdb1 	bl	80011a4 <SPI_EndRxTxTransaction>
 8001642:	2800      	cmp	r0, #0
 8001644:	f43f af2d 	beq.w	80014a2 <HAL_SPI_TransmitReceive+0x188>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001648:	2320      	movs	r3, #32
 800164a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800164c:	2501      	movs	r5, #1
 800164e:	e728      	b.n	80014a2 <HAL_SPI_TransmitReceive+0x188>
      READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8001650:	7b1b      	ldrb	r3, [r3, #12]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8001652:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001654:	2b02      	cmp	r3, #2
 8001656:	d1e2      	bne.n	800161e <HAL_SPI_TransmitReceive+0x304>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8001658:	2201      	movs	r2, #1
 800165a:	9700      	str	r7, [sp, #0]
 800165c:	4633      	mov	r3, r6
 800165e:	4611      	mov	r1, r2
 8001660:	4620      	mov	r0, r4
 8001662:	f7ff fd2b 	bl	80010bc <SPI_WaitFlagStateUntilTimeout>
 8001666:	2800      	cmp	r0, #0
 8001668:	f47f aeeb 	bne.w	8001442 <HAL_SPI_TransmitReceive+0x128>
        READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	7b1b      	ldrb	r3, [r3, #12]
 8001670:	e7d5      	b.n	800161e <HAL_SPI_TransmitReceive+0x304>
    errorcode = HAL_BUSY;
 8001672:	2502      	movs	r5, #2
 8001674:	e715      	b.n	80014a2 <HAL_SPI_TransmitReceive+0x188>
  __HAL_LOCK(hspi);
 8001676:	2502      	movs	r5, #2
 8001678:	e719      	b.n	80014ae <HAL_SPI_TransmitReceive+0x194>
	...

0800167c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800167c:	b538      	push	{r3, r4, r5, lr}
 800167e:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001680:	69c0      	ldr	r0, [r0, #28]
 8001682:	6921      	ldr	r1, [r4, #16]
 8001684:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001686:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001688:	430a      	orrs	r2, r1
 800168a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800168c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800168e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001690:	496d      	ldr	r1, [pc, #436]	; (8001848 <UART_SetConfig+0x1cc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001692:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001694:	4029      	ands	r1, r5
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	68e1      	ldr	r1, [r4, #12]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800169e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80016a4:	430a      	orrs	r2, r1
 80016a6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016a8:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80016aa:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016ac:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80016b0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016b2:	430a      	orrs	r2, r1
 80016b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016b6:	4a65      	ldr	r2, [pc, #404]	; (800184c <UART_SetConfig+0x1d0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d111      	bne.n	80016e0 <UART_SetConfig+0x64>
 80016bc:	4b64      	ldr	r3, [pc, #400]	; (8001850 <UART_SetConfig+0x1d4>)
 80016be:	4a65      	ldr	r2, [pc, #404]	; (8001854 <UART_SetConfig+0x1d8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	5cd3      	ldrb	r3, [r2, r3]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80016cc:	d17e      	bne.n	80017cc <UART_SetConfig+0x150>
  {
    switch (clocksource)
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d847      	bhi.n	8001762 <UART_SetConfig+0xe6>
 80016d2:	e8df f003 	tbb	[pc, r3]
 80016d6:	5e56      	.short	0x5e56
 80016d8:	46b54679 	.word	0x46b54679
 80016dc:	4646      	.short	0x4646
 80016de:	61          	.byte	0x61
 80016df:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016e0:	4a5d      	ldr	r2, [pc, #372]	; (8001858 <UART_SetConfig+0x1dc>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d117      	bne.n	8001716 <UART_SetConfig+0x9a>
 80016e6:	4b5a      	ldr	r3, [pc, #360]	; (8001850 <UART_SetConfig+0x1d4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f2:	f000 80a2 	beq.w	800183a <UART_SetConfig+0x1be>
 80016f6:	d802      	bhi.n	80016fe <UART_SetConfig+0x82>
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0e5      	beq.n	80016c8 <UART_SetConfig+0x4c>
 80016fc:	e031      	b.n	8001762 <UART_SetConfig+0xe6>
 80016fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001702:	f000 8094 	beq.w	800182e <UART_SetConfig+0x1b2>
 8001706:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800170a:	d12a      	bne.n	8001762 <UART_SetConfig+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800170c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001710:	d05a      	beq.n	80017c8 <UART_SetConfig+0x14c>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001712:	4852      	ldr	r0, [pc, #328]	; (800185c <UART_SetConfig+0x1e0>)
 8001714:	e076      	b.n	8001804 <UART_SetConfig+0x188>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001716:	4a52      	ldr	r2, [pc, #328]	; (8001860 <UART_SetConfig+0x1e4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d10e      	bne.n	800173a <UART_SetConfig+0xbe>
 800171c:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <UART_SetConfig+0x1d4>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001724:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001728:	f000 8087 	beq.w	800183a <UART_SetConfig+0x1be>
 800172c:	d9e4      	bls.n	80016f8 <UART_SetConfig+0x7c>
 800172e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001732:	d07c      	beq.n	800182e <UART_SetConfig+0x1b2>
 8001734:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001738:	e7e7      	b.n	800170a <UART_SetConfig+0x8e>
 800173a:	4a4a      	ldr	r2, [pc, #296]	; (8001864 <UART_SetConfig+0x1e8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d10d      	bne.n	800175c <UART_SetConfig+0xe0>
 8001740:	4b43      	ldr	r3, [pc, #268]	; (8001850 <UART_SetConfig+0x1d4>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001748:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800174c:	d075      	beq.n	800183a <UART_SetConfig+0x1be>
 800174e:	d9d3      	bls.n	80016f8 <UART_SetConfig+0x7c>
 8001750:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001754:	d06b      	beq.n	800182e <UART_SetConfig+0x1b2>
 8001756:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800175a:	e7d6      	b.n	800170a <UART_SetConfig+0x8e>
 800175c:	4a42      	ldr	r2, [pc, #264]	; (8001868 <UART_SetConfig+0x1ec>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d001      	beq.n	8001766 <UART_SetConfig+0xea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8001762:	2001      	movs	r0, #1
 8001764:	e011      	b.n	800178a <UART_SetConfig+0x10e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001766:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <UART_SetConfig+0x1d4>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800176e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001772:	d062      	beq.n	800183a <UART_SetConfig+0x1be>
 8001774:	d9c0      	bls.n	80016f8 <UART_SetConfig+0x7c>
 8001776:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800177a:	d058      	beq.n	800182e <UART_SetConfig+0x1b2>
 800177c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001780:	e7c3      	b.n	800170a <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001782:	f7ff faff 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001786:	b948      	cbnz	r0, 800179c <UART_SetConfig+0x120>
 8001788:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800178a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800178c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8001790:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8001792:	f7ff fb0f 	bl	8000db4 <HAL_RCC_GetPCLK2Freq>
        break;
 8001796:	e7f6      	b.n	8001786 <UART_SetConfig+0x10a>
        pclk = (uint32_t) LSE_VALUE;
 8001798:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800179c:	6862      	ldr	r2, [r4, #4]
 800179e:	0853      	lsrs	r3, r2, #1
 80017a0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80017a4:	fbb0 f0f2 	udiv	r0, r0, r2
 80017a8:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017aa:	f1a3 0110 	sub.w	r1, r3, #16
 80017ae:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80017b2:	4291      	cmp	r1, r2
 80017b4:	d8d5      	bhi.n	8001762 <UART_SetConfig+0xe6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80017b6:	f020 000f 	bic.w	r0, r0, #15
 80017ba:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80017bc:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017be:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80017c2:	4318      	orrs	r0, r3
 80017c4:	60d0      	str	r0, [r2, #12]
 80017c6:	e7df      	b.n	8001788 <UART_SetConfig+0x10c>
        pclk = (uint32_t) HSI_VALUE;
 80017c8:	4824      	ldr	r0, [pc, #144]	; (800185c <UART_SetConfig+0x1e0>)
 80017ca:	e7e7      	b.n	800179c <UART_SetConfig+0x120>
    switch (clocksource)
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d8c8      	bhi.n	8001762 <UART_SetConfig+0xe6>
 80017d0:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <UART_SetConfig+0x15c>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	080017fd 	.word	0x080017fd
 80017dc:	08001823 	.word	0x08001823
 80017e0:	08001713 	.word	0x08001713
 80017e4:	08001763 	.word	0x08001763
 80017e8:	08001829 	.word	0x08001829
 80017ec:	08001763 	.word	0x08001763
 80017f0:	08001763 	.word	0x08001763
 80017f4:	08001763 	.word	0x08001763
 80017f8:	08001835 	.word	0x08001835
        pclk = HAL_RCC_GetPCLK1Freq();
 80017fc:	f7ff fac2 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001800:	2800      	cmp	r0, #0
 8001802:	d0c1      	beq.n	8001788 <UART_SetConfig+0x10c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001804:	6863      	ldr	r3, [r4, #4]
 8001806:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800180a:	fbb0 f0f3 	udiv	r0, r0, r3
 800180e:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001810:	f1a0 0210 	sub.w	r2, r0, #16
 8001814:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001818:	429a      	cmp	r2, r3
 800181a:	d8a2      	bhi.n	8001762 <UART_SetConfig+0xe6>
        huart->Instance->BRR = usartdiv;
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	60d8      	str	r0, [r3, #12]
 8001820:	e7b2      	b.n	8001788 <UART_SetConfig+0x10c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001822:	f7ff fac7 	bl	8000db4 <HAL_RCC_GetPCLK2Freq>
        break;
 8001826:	e7eb      	b.n	8001800 <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetSysClockFreq();
 8001828:	f7ff f9d6 	bl	8000bd8 <HAL_RCC_GetSysClockFreq>
        break;
 800182c:	e7e8      	b.n	8001800 <UART_SetConfig+0x184>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800182e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001832:	d0b3      	beq.n	800179c <UART_SetConfig+0x120>
        pclk = (uint32_t) LSE_VALUE;
 8001834:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001838:	e7e4      	b.n	8001804 <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800183a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800183e:	d1f3      	bne.n	8001828 <UART_SetConfig+0x1ac>
        pclk = HAL_RCC_GetSysClockFreq();
 8001840:	f7ff f9ca 	bl	8000bd8 <HAL_RCC_GetSysClockFreq>
        break;
 8001844:	e79f      	b.n	8001786 <UART_SetConfig+0x10a>
 8001846:	bf00      	nop
 8001848:	efff69f3 	.word	0xefff69f3
 800184c:	40013800 	.word	0x40013800
 8001850:	40021000 	.word	0x40021000
 8001854:	08002758 	.word	0x08002758
 8001858:	40004400 	.word	0x40004400
 800185c:	007a1200 	.word	0x007a1200
 8001860:	40004800 	.word	0x40004800
 8001864:	40004c00 	.word	0x40004c00
 8001868:	40005000 	.word	0x40005000

0800186c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800186c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800186e:	07da      	lsls	r2, r3, #31
{
 8001870:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001872:	d506      	bpl.n	8001882 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001874:	6801      	ldr	r1, [r0, #0]
 8001876:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001878:	684a      	ldr	r2, [r1, #4]
 800187a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800187e:	4322      	orrs	r2, r4
 8001880:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001882:	079c      	lsls	r4, r3, #30
 8001884:	d506      	bpl.n	8001894 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001886:	6801      	ldr	r1, [r0, #0]
 8001888:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800188a:	684a      	ldr	r2, [r1, #4]
 800188c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001890:	4322      	orrs	r2, r4
 8001892:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001894:	0759      	lsls	r1, r3, #29
 8001896:	d506      	bpl.n	80018a6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001898:	6801      	ldr	r1, [r0, #0]
 800189a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800189c:	684a      	ldr	r2, [r1, #4]
 800189e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018a2:	4322      	orrs	r2, r4
 80018a4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80018a6:	071a      	lsls	r2, r3, #28
 80018a8:	d506      	bpl.n	80018b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80018aa:	6801      	ldr	r1, [r0, #0]
 80018ac:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80018ae:	684a      	ldr	r2, [r1, #4]
 80018b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018b4:	4322      	orrs	r2, r4
 80018b6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80018b8:	06dc      	lsls	r4, r3, #27
 80018ba:	d506      	bpl.n	80018ca <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80018bc:	6801      	ldr	r1, [r0, #0]
 80018be:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80018c0:	688a      	ldr	r2, [r1, #8]
 80018c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018c6:	4322      	orrs	r2, r4
 80018c8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80018ca:	0699      	lsls	r1, r3, #26
 80018cc:	d506      	bpl.n	80018dc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80018ce:	6801      	ldr	r1, [r0, #0]
 80018d0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80018d2:	688a      	ldr	r2, [r1, #8]
 80018d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018d8:	4322      	orrs	r2, r4
 80018da:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80018dc:	065a      	lsls	r2, r3, #25
 80018de:	d50f      	bpl.n	8001900 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80018e0:	6801      	ldr	r1, [r0, #0]
 80018e2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80018e4:	684a      	ldr	r2, [r1, #4]
 80018e6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80018ea:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018ec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80018f0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018f2:	d105      	bne.n	8001900 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80018f4:	684a      	ldr	r2, [r1, #4]
 80018f6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80018f8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80018fc:	4322      	orrs	r2, r4
 80018fe:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001900:	061b      	lsls	r3, r3, #24
 8001902:	d506      	bpl.n	8001912 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001904:	6802      	ldr	r2, [r0, #0]
 8001906:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001908:	6853      	ldr	r3, [r2, #4]
 800190a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800190e:	430b      	orrs	r3, r1
 8001910:	6053      	str	r3, [r2, #4]
  }
}
 8001912:	bd10      	pop	{r4, pc}

08001914 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001918:	9d06      	ldr	r5, [sp, #24]
 800191a:	4604      	mov	r4, r0
 800191c:	460f      	mov	r7, r1
 800191e:	4616      	mov	r6, r2
 8001920:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001922:	6821      	ldr	r1, [r4, #0]
 8001924:	69ca      	ldr	r2, [r1, #28]
 8001926:	ea37 0302 	bics.w	r3, r7, r2
 800192a:	bf0c      	ite	eq
 800192c:	2201      	moveq	r2, #1
 800192e:	2200      	movne	r2, #0
 8001930:	42b2      	cmp	r2, r6
 8001932:	d001      	beq.n	8001938 <UART_WaitOnFlagUntilTimeout+0x24>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001934:	2000      	movs	r0, #0
 8001936:	e018      	b.n	800196a <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8001938:	1c68      	adds	r0, r5, #1
 800193a:	d0f3      	beq.n	8001924 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800193c:	f7fe fd5a 	bl	80003f4 <HAL_GetTick>
 8001940:	eba0 0008 	sub.w	r0, r0, r8
 8001944:	42a8      	cmp	r0, r5
 8001946:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001948:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800194a:	d800      	bhi.n	800194e <UART_WaitOnFlagUntilTimeout+0x3a>
 800194c:	b97d      	cbnz	r5, 800196e <UART_WaitOnFlagUntilTimeout+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800194e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001952:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001954:	6883      	ldr	r3, [r0, #8]
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800195c:	2320      	movs	r3, #32
 800195e:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001960:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8001962:	2300      	movs	r3, #0
 8001964:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8001968:	2003      	movs	r0, #3
}
 800196a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800196e:	075a      	lsls	r2, r3, #29
 8001970:	d5d7      	bpl.n	8001922 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001972:	69c3      	ldr	r3, [r0, #28]
 8001974:	051b      	lsls	r3, r3, #20
 8001976:	d5d4      	bpl.n	8001922 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800197c:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800197e:	6803      	ldr	r3, [r0, #0]
 8001980:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001984:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001986:	6883      	ldr	r3, [r0, #8]
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800198e:	2320      	movs	r3, #32
 8001990:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001992:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001994:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8001998:	e7e3      	b.n	8001962 <UART_WaitOnFlagUntilTimeout+0x4e>

0800199a <HAL_UART_Transmit>:
{
 800199a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800199e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80019a0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80019a2:	2b20      	cmp	r3, #32
{
 80019a4:	4604      	mov	r4, r0
 80019a6:	460e      	mov	r6, r1
 80019a8:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80019aa:	d14d      	bne.n	8001a48 <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 80019ac:	2900      	cmp	r1, #0
 80019ae:	d049      	beq.n	8001a44 <HAL_UART_Transmit+0xaa>
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	d047      	beq.n	8001a44 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80019b4:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d045      	beq.n	8001a48 <HAL_UART_Transmit+0xae>
 80019bc:	2301      	movs	r3, #1
 80019be:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019c2:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019c4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019c6:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019ca:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80019cc:	f7fe fd12 	bl	80003f4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019d0:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80019d2:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80019da:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 80019dc:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019e0:	d103      	bne.n	80019ea <HAL_UART_Transmit+0x50>
 80019e2:	6923      	ldr	r3, [r4, #16]
 80019e4:	b90b      	cbnz	r3, 80019ea <HAL_UART_Transmit+0x50>
 80019e6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80019e8:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 80019ea:	2300      	movs	r3, #0
 80019ec:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80019f0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019f4:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80019f8:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019fa:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 80019fc:	b93a      	cbnz	r2, 8001a0e <HAL_UART_Transmit+0x74>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019fe:	2140      	movs	r1, #64	; 0x40
 8001a00:	4620      	mov	r0, r4
 8001a02:	f7ff ff87 	bl	8001914 <UART_WaitOnFlagUntilTimeout>
 8001a06:	b940      	cbnz	r0, 8001a1a <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8001a0c:	e006      	b.n	8001a1c <HAL_UART_Transmit+0x82>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	4620      	mov	r0, r4
 8001a14:	f7ff ff7e 	bl	8001914 <UART_WaitOnFlagUntilTimeout>
 8001a18:	b118      	cbz	r0, 8001a22 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8001a1a:	2003      	movs	r0, #3
}
 8001a1c:	b003      	add	sp, #12
 8001a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a22:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001a24:	b95e      	cbnz	r6, 8001a3e <HAL_UART_Transmit+0xa4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a26:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a2e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001a30:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001a3c:	e7d8      	b.n	80019f0 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a3e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001a42:	e7f4      	b.n	8001a2e <HAL_UART_Transmit+0x94>
      return  HAL_ERROR;
 8001a44:	2001      	movs	r0, #1
 8001a46:	e7e9      	b.n	8001a1c <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001a48:	2002      	movs	r0, #2
 8001a4a:	e7e7      	b.n	8001a1c <HAL_UART_Transmit+0x82>

08001a4c <UART_CheckIdleState>:
{
 8001a4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a4e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a50:	2600      	movs	r6, #0
 8001a52:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8001a56:	f7fe fccd 	bl	80003f4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001a60:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a62:	d416      	bmi.n	8001a92 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	075b      	lsls	r3, r3, #29
 8001a6a:	d50a      	bpl.n	8001a82 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2200      	movs	r2, #0
 8001a74:	462b      	mov	r3, r5
 8001a76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f7ff ff4a 	bl	8001914 <UART_WaitOnFlagUntilTimeout>
 8001a80:	b998      	cbnz	r0, 8001aaa <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8001a82:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a84:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001a86:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001a88:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001a8c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a8e:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8001a90:	e00c      	b.n	8001aac <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	4632      	mov	r2, r6
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f7ff ff37 	bl	8001914 <UART_WaitOnFlagUntilTimeout>
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	d0dc      	beq.n	8001a64 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8001aaa:	2003      	movs	r0, #3
}
 8001aac:	b002      	add	sp, #8
 8001aae:	bd70      	pop	{r4, r5, r6, pc}

08001ab0 <HAL_UART_Init>:
{
 8001ab0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	b340      	cbz	r0, 8001b08 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001ab6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001ab8:	b91b      	cbnz	r3, 8001ac2 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8001aba:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8001abe:	f000 f9a1 	bl	8001e04 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001ac2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ac4:	2324      	movs	r3, #36	; 0x24
 8001ac6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8001ac8:	6813      	ldr	r3, [r2, #0]
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f7ff fdd3 	bl	800167c <UART_SetConfig>
 8001ad6:	2801      	cmp	r0, #1
 8001ad8:	d016      	beq.n	8001b08 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001adc:	b113      	cbz	r3, 8001ae4 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f7ff fec4 	bl	800186c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001aec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001af4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001afc:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001afe:	601a      	str	r2, [r3, #0]
}
 8001b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001b04:	f7ff bfa2 	b.w	8001a4c <UART_CheckIdleState>
}
 8001b08:	2001      	movs	r0, #1
 8001b0a:	bd10      	pop	{r4, pc}

08001b0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b12:	e003      	b.n	8001b1c <LoopCopyDataInit>

08001b14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b1a:	3104      	adds	r1, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b1c:	480b      	ldr	r0, [pc, #44]	; (8001b4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b24:	d3f6      	bcc.n	8001b14 <CopyDataInit>
	ldr	r2, =_sbss
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b28:	e002      	b.n	8001b30 <LoopFillZerobss>

08001b2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b2c:	f842 3b04 	str.w	r3, [r2], #4

08001b30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <LoopForever+0x16>)
	cmp	r2, r3
 8001b32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b34:	d3f9      	bcc.n	8001b2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b36:	f7fe fbe7 	bl	8000308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b3a:	f000 f99d 	bl	8001e78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b3e:	f000 f869 	bl	8001c14 <main>

08001b42 <LoopForever>:

LoopForever:
    b LoopForever
 8001b42:	e7fe      	b.n	8001b42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b44:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001b48:	0800280c 	.word	0x0800280c
	ldr	r0, =_sdata
 8001b4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b50:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8001b54:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8001b58:	20000298 	.word	0x20000298

08001b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b5c:	e7fe      	b.n	8001b5c <ADC1_2_IRQHandler>
	...

08001b60 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8001b60:	b500      	push	{lr}
 8001b62:	b0a1      	sub	sp, #132	; 0x84
    char uart_out[128];
    sprintf(uart_out, "Error_Handler ... reset.\r\n");
 8001b64:	4910      	ldr	r1, [pc, #64]	; (8001ba8 <Error_Handler+0x48>)
 8001b66:	4668      	mov	r0, sp
 8001b68:	f000 f9d2 	bl	8001f10 <strcpy>
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_out, strlen(uart_out), 100);
 8001b6c:	4668      	mov	r0, sp
 8001b6e:	f7fe fb37 	bl	80001e0 <strlen>
 8001b72:	2364      	movs	r3, #100	; 0x64
 8001b74:	b282      	uxth	r2, r0
 8001b76:	4669      	mov	r1, sp
 8001b78:	480c      	ldr	r0, [pc, #48]	; (8001bac <Error_Handler+0x4c>)
 8001b7a:	f7ff ff0e 	bl	800199a <HAL_UART_Transmit>

  while(1)
  {
    /* Toggle LED2 for error */
    BSP_LED_Toggle(LED2);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7fe fbb8 	bl	80002f4 <BSP_LED_Toggle>
    HAL_Delay(1000);
 8001b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b88:	f7fe fc3a 	bl	8000400 <HAL_Delay>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b8c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b90:	4907      	ldr	r1, [pc, #28]	; (8001bb0 <Error_Handler+0x50>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <Error_Handler+0x54>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b94:	68ca      	ldr	r2, [r1, #12]
 8001b96:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60cb      	str	r3, [r1, #12]
 8001b9e:	f3bf 8f4f 	dsb	sy
    __NOP();
 8001ba2:	bf00      	nop
 8001ba4:	e7fd      	b.n	8001ba2 <Error_Handler+0x42>
 8001ba6:	bf00      	nop
 8001ba8:	0800275c 	.word	0x0800275c
 8001bac:	20000190 	.word	0x20000190
 8001bb0:	e000ed00 	.word	0xe000ed00
 8001bb4:	05fa0004 	.word	0x05fa0004

08001bb8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb8:	b510      	push	{r4, lr}
 8001bba:	b0a6      	sub	sp, #152	; 0x98
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  
  /* HSI Oscillator already ON after system reset, activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bc0:	2402      	movs	r4, #2
 8001bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bc6:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001bd0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8001bd4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8001bda:	f7fe fd61 	bl	80006a0 <HAL_RCC_OscConfig>
 8001bde:	b100      	cbz	r0, 8001be2 <SystemClock_Config+0x2a>
 8001be0:	e7fe      	b.n	8001be0 <SystemClock_Config+0x28>
    while(1); 
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001be2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be4:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8001be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bec:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bee:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	a801      	add	r0, sp, #4
 8001bf6:	f7ff f819 	bl	8000c2c <HAL_RCC_ClockConfig>
 8001bfa:	b100      	cbz	r0, 8001bfe <SystemClock_Config+0x46>
 8001bfc:	e7fe      	b.n	8001bfc <SystemClock_Config+0x44>
  {
    /* Initialization Error */
    while(1); 
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bfe:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c00:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c02:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c04:	f7ff f8ee 	bl	8000de4 <HAL_RCCEx_PeriphCLKConfig>
 8001c08:	b108      	cbz	r0, 8001c0e <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001c0a:	f7ff ffa9 	bl	8001b60 <Error_Handler>
  }
}
 8001c0e:	b026      	add	sp, #152	; 0x98
 8001c10:	bd10      	pop	{r4, pc}
	...

08001c14 <main>:
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b0a4      	sub	sp, #144	; 0x90
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
 8001c18:	4c44      	ldr	r4, [pc, #272]	; (8001d2c <main+0x118>)
  HAL_Init();
 8001c1a:	f7fe fbcd 	bl	80003b8 <HAL_Init>
  SystemClock_Config();
 8001c1e:	f7ff ffcb 	bl	8001bb8 <SystemClock_Config>
  huart2.Init.BaudRate = 38400;
 8001c22:	4843      	ldr	r0, [pc, #268]	; (8001d30 <main+0x11c>)
 8001c24:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001c28:	e9c4 0300 	strd	r0, r3, [r4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2e:	2300      	movs	r3, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c30:	4620      	mov	r0, r4
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c32:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c36:	6123      	str	r3, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c38:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3c:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c40:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c42:	f7ff ff35 	bl	8001ab0 <HAL_UART_Init>
 8001c46:	4605      	mov	r5, r0
 8001c48:	b108      	cbz	r0, 8001c4e <main+0x3a>
            Error_Handler();
 8001c4a:	f7ff ff89 	bl	8001b60 <Error_Handler>
  BSP_LED_Init(LED2);
 8001c4e:	f7fe fb1f 	bl	8000290 <BSP_LED_Init>
  SpiHandle.Instance               = SPIx;
 8001c52:	4838      	ldr	r0, [pc, #224]	; (8001d34 <main+0x120>)
 8001c54:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <main+0x124>)
 8001c56:	6003      	str	r3, [r0, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001c58:	2338      	movs	r3, #56	; 0x38
 8001c5a:	61c3      	str	r3, [r0, #28]
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8001c5c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c60:	60c3      	str	r3, [r0, #12]
  SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
 8001c62:	2107      	movs	r1, #7
 8001c64:	2301      	movs	r3, #1
 8001c66:	e9c0 130b 	strd	r1, r3, [r0, #44]	; 0x2c
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8001c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8001c6e:	6085      	str	r5, [r0, #8]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001c70:	e9c0 5504 	strd	r5, r5, [r0, #16]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001c74:	e9c0 5508 	strd	r5, r5, [r0, #32]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001c78:	6285      	str	r5, [r0, #40]	; 0x28
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8001c7a:	6183      	str	r3, [r0, #24]
  SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;
 8001c7c:	6345      	str	r5, [r0, #52]	; 0x34
  SpiHandle.Init.Mode = SPI_MODE_SLAVE;
 8001c7e:	6045      	str	r5, [r0, #4]
  if(HAL_SPI_Init(&SpiHandle) != HAL_OK)
 8001c80:	f7ff fab7 	bl	80011f2 <HAL_SPI_Init>
 8001c84:	2800      	cmp	r0, #0
 8001c86:	d1e0      	bne.n	8001c4a <main+0x36>
  sprintf(uart_out, "\r\nInitizalized SPI peripheral\r\n");
 8001c88:	492c      	ldr	r1, [pc, #176]	; (8001d3c <main+0x128>)
        n = (n < 126) ? n + 1 : 0x30;
 8001c8a:	4e2d      	ldr	r6, [pc, #180]	; (8001d40 <main+0x12c>)
        sprintf((char*) aTxBuffer, "ABCDE"); // junk data
 8001c8c:	4f2d      	ldr	r7, [pc, #180]	; (8001d44 <main+0x130>)
  sprintf(uart_out, "\r\nInitizalized SPI peripheral\r\n");
 8001c8e:	a804      	add	r0, sp, #16
 8001c90:	f000 f93e 	bl	8001f10 <strcpy>
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_out, strlen(uart_out), 100);
 8001c94:	a804      	add	r0, sp, #16
 8001c96:	f7fe faa3 	bl	80001e0 <strlen>
 8001c9a:	2364      	movs	r3, #100	; 0x64
 8001c9c:	b282      	uxth	r2, r0
 8001c9e:	a904      	add	r1, sp, #16
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff fe7a 	bl	800199a <HAL_UART_Transmit>
 8001ca6:	4635      	mov	r5, r6
        sprintf((char*) aTxBuffer, "ABCDE"); // junk data
 8001ca8:	4927      	ldr	r1, [pc, #156]	; (8001d48 <main+0x134>)
        switch (HAL_SPI_TransmitReceive(
 8001caa:	4c28      	ldr	r4, [pc, #160]	; (8001d4c <main+0x138>)
        sprintf((char*) aTxBuffer, "ABCDE"); // junk data
 8001cac:	4638      	mov	r0, r7
 8001cae:	f000 f92f 	bl	8001f10 <strcpy>
        n = (n < 126) ? n + 1 : 0x30;
 8001cb2:	6833      	ldr	r3, [r6, #0]
        switch (HAL_SPI_TransmitReceive(
 8001cb4:	4923      	ldr	r1, [pc, #140]	; (8001d44 <main+0x130>)
 8001cb6:	481f      	ldr	r0, [pc, #124]	; (8001d34 <main+0x120>)
        n = (n < 126) ? n + 1 : 0x30;
 8001cb8:	2b7d      	cmp	r3, #125	; 0x7d
 8001cba:	bfd4      	ite	le
 8001cbc:	3301      	addle	r3, #1
 8001cbe:	2330      	movgt	r3, #48	; 0x30
 8001cc0:	602b      	str	r3, [r5, #0]
        aTxBuffer[3] = n;
 8001cc2:	70fb      	strb	r3, [r7, #3]
        switch (HAL_SPI_TransmitReceive(
 8001cc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	4622      	mov	r2, r4
 8001ccc:	2304      	movs	r3, #4
 8001cce:	f7ff fb24 	bl	800131a <HAL_SPI_TransmitReceive>
 8001cd2:	2801      	cmp	r0, #1
 8001cd4:	d0b9      	beq.n	8001c4a <main+0x36>
 8001cd6:	d30f      	bcc.n	8001cf8 <main+0xe4>
 8001cd8:	2803      	cmp	r0, #3
 8001cda:	d1e5      	bne.n	8001ca8 <main+0x94>
            sprintf(uart_out, "\r\nHAL_TIMEOUT, error.\r\n");
 8001cdc:	491c      	ldr	r1, [pc, #112]	; (8001d50 <main+0x13c>)
 8001cde:	a804      	add	r0, sp, #16
 8001ce0:	f000 f916 	bl	8001f10 <strcpy>
            HAL_UART_Transmit(&huart2, (uint8_t*) uart_out, strlen(uart_out), 100);
 8001ce4:	a804      	add	r0, sp, #16
 8001ce6:	f7fe fa7b 	bl	80001e0 <strlen>
 8001cea:	2364      	movs	r3, #100	; 0x64
 8001cec:	b282      	uxth	r2, r0
 8001cee:	a904      	add	r1, sp, #16
 8001cf0:	480e      	ldr	r0, [pc, #56]	; (8001d2c <main+0x118>)
 8001cf2:	f7ff fe52 	bl	800199a <HAL_UART_Transmit>
 8001cf6:	e7a8      	b.n	8001c4a <main+0x36>
            BSP_LED_On(LED2);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7fe faf1 	bl	80002e0 <BSP_LED_On>
            sprintf(uart_out, ">%d: %02X %02X %02X %02X.\r\n", n,
 8001cfe:	78e2      	ldrb	r2, [r4, #3]
 8001d00:	7823      	ldrb	r3, [r4, #0]
 8001d02:	9202      	str	r2, [sp, #8]
 8001d04:	78a2      	ldrb	r2, [r4, #2]
 8001d06:	9201      	str	r2, [sp, #4]
 8001d08:	7862      	ldrb	r2, [r4, #1]
 8001d0a:	9200      	str	r2, [sp, #0]
 8001d0c:	682a      	ldr	r2, [r5, #0]
 8001d0e:	4911      	ldr	r1, [pc, #68]	; (8001d54 <main+0x140>)
 8001d10:	a804      	add	r0, sp, #16
 8001d12:	f000 f8dd 	bl	8001ed0 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) uart_out, strlen(uart_out), 100);
 8001d16:	a804      	add	r0, sp, #16
 8001d18:	f7fe fa62 	bl	80001e0 <strlen>
 8001d1c:	2364      	movs	r3, #100	; 0x64
 8001d1e:	b282      	uxth	r2, r0
 8001d20:	a904      	add	r1, sp, #16
 8001d22:	4802      	ldr	r0, [pc, #8]	; (8001d2c <main+0x118>)
 8001d24:	f7ff fe39 	bl	800199a <HAL_UART_Transmit>
            break;
 8001d28:	e7be      	b.n	8001ca8 <main+0x94>
 8001d2a:	bf00      	nop
 8001d2c:	20000190 	.word	0x20000190
 8001d30:	40004400 	.word	0x40004400
 8001d34:	200000ac 	.word	0x200000ac
 8001d38:	40003c00 	.word	0x40003c00
 8001d3c:	08002777 	.word	0x08002777
 8001d40:	20000098 	.word	0x20000098
 8001d44:	20000214 	.word	0x20000214
 8001d48:	08002797 	.word	0x08002797
 8001d4c:	20000110 	.word	0x20000110
 8001d50:	080027b9 	.word	0x080027b9
 8001d54:	0800279d 	.word	0x0800279d

08001d58 <HAL_SPI_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001d58:	b570      	push	{r4, r5, r6, lr}
GPIO_InitTypeDef  GPIO_InitStruct;

  if(hspi->Instance == SPIx)
 8001d5a:	6802      	ldr	r2, [r0, #0]
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <HAL_SPI_MspInit+0xa4>)
 8001d5e:	429a      	cmp	r2, r3
{
 8001d60:	b08a      	sub	sp, #40	; 0x28
  if(hspi->Instance == SPIx)
 8001d62:	d148      	bne.n	8001df6 <HAL_SPI_MspInit+0x9e>
  {     
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 8001d64:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;      // GN: was GPIO_PULLDOWN, which works for 2xNucleo demo, but needs NOPULL for nucleo<->stm8(as controller) (refer to spi3 in cubemx)
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8001d68:	2406      	movs	r4, #6
    SPIx_SCK_GPIO_CLK_ENABLE();
 8001d6a:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001d6c:	4824      	ldr	r0, [pc, #144]	; (8001e00 <HAL_SPI_MspInit+0xa8>)
    SPIx_SCK_GPIO_CLK_ENABLE();
 8001d6e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001d72:	615a      	str	r2, [r3, #20]
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001d7a:	9201      	str	r2, [sp, #4]
 8001d7c:	9a01      	ldr	r2, [sp, #4]
    SPIx_MISO_GPIO_CLK_ENABLE();
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001d84:	615a      	str	r2, [r3, #20]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001d8c:	9202      	str	r2, [sp, #8]
 8001d8e:	9a02      	ldr	r2, [sp, #8]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001d96:	615a      	str	r2, [r3, #20]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001d9e:	9203      	str	r2, [sp, #12]
 8001da0:	9a03      	ldr	r2, [sp, #12]
    SPIx_CLK_ENABLE(); 
 8001da2:	69da      	ldr	r2, [r3, #28]
 8001da4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001da8:	61da      	str	r2, [r3, #28]
 8001daa:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8001dac:	9409      	str	r4, [sp, #36]	; 0x24
    SPIx_CLK_ENABLE(); 
 8001dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001db2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    SPIx_CLK_ENABLE(); 
 8001db8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001dba:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001dbe:	2503      	movs	r5, #3
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001dc0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001dc6:	e9cd 6507 	strd	r6, r5, [sp, #28]
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001dca:	f7fe fb89 	bl	80004e0 <HAL_GPIO_Init>

    /* SPI MOSI GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8001dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001dd2:	a905      	add	r1, sp, #20
 8001dd4:	480a      	ldr	r0, [pc, #40]	; (8001e00 <HAL_SPI_MspInit+0xa8>)
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8001dd6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8001dd8:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001dda:	f7fe fb81 	bl	80004e0 <HAL_GPIO_Init>

    /* SPI MISO GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD; // GPIO_MODE_AF_PP;
 8001dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001de2:	2312      	movs	r3, #18
 8001de4:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;      // GN: was GPIO_PULLDOWN, which works for 2xNucleo demo, but needs NOPULL for nucleo<->stm8(as controller) (refer to spi3 in cubemx)
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001de8:	4805      	ldr	r0, [pc, #20]	; (8001e00 <HAL_SPI_MspInit+0xa8>)
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8001dea:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001dec:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001dee:	e9cd 6507 	strd	r6, r5, [sp, #28]
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001df2:	f7fe fb75 	bl	80004e0 <HAL_GPIO_Init>
  }
}
 8001df6:	b00a      	add	sp, #40	; 0x28
 8001df8:	bd70      	pop	{r4, r5, r6, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40003c00 	.word	0x40003c00
 8001e00:	48000800 	.word	0x48000800

08001e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e04:	b510      	push	{r4, lr}
 8001e06:	4604      	mov	r4, r0
 8001e08:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0a:	2214      	movs	r2, #20
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	a803      	add	r0, sp, #12
 8001e10:	f000 f856 	bl	8001ec0 <memset>
  if(huart->Instance==USART2)
 8001e14:	6822      	ldr	r2, [r4, #0]
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_UART_MspInit+0x5c>)
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d11e      	bne.n	8001e5a <HAL_UART_MspInit+0x56>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e1c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e22:	69da      	ldr	r2, [r3, #28]
 8001e24:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e28:	61da      	str	r2, [r3, #28]
 8001e2a:	69da      	ldr	r2, [r3, #28]
 8001e2c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001e30:	9201      	str	r2, [sp, #4]
 8001e32:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e3a:	615a      	str	r2, [r3, #20]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	9302      	str	r3, [sp, #8]
 8001e44:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	220c      	movs	r2, #12
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e52:	2307      	movs	r3, #7
 8001e54:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f7fe fb43 	bl	80004e0 <HAL_GPIO_Init>
  }
}
 8001e5a:	b008      	add	sp, #32
 8001e5c:	bd10      	pop	{r4, pc}
 8001e5e:	bf00      	nop
 8001e60:	40004400 	.word	0x40004400

08001e64 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001e64:	4770      	bx	lr

08001e66 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001e66:	e7fe      	b.n	8001e66 <HardFault_Handler>

08001e68 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001e68:	e7fe      	b.n	8001e68 <MemManage_Handler>

08001e6a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001e6a:	e7fe      	b.n	8001e6a <BusFault_Handler>

08001e6c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001e6c:	e7fe      	b.n	8001e6c <UsageFault_Handler>

08001e6e <SVC_Handler>:
 8001e6e:	4770      	bx	lr

08001e70 <DebugMon_Handler>:
 8001e70:	4770      	bx	lr

08001e72 <PendSV_Handler>:
 8001e72:	4770      	bx	lr

08001e74 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8001e74:	f7fe bab2 	b.w	80003dc <HAL_IncTick>

08001e78 <__libc_init_array>:
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	4e0d      	ldr	r6, [pc, #52]	; (8001eb0 <__libc_init_array+0x38>)
 8001e7c:	4c0d      	ldr	r4, [pc, #52]	; (8001eb4 <__libc_init_array+0x3c>)
 8001e7e:	1ba4      	subs	r4, r4, r6
 8001e80:	10a4      	asrs	r4, r4, #2
 8001e82:	2500      	movs	r5, #0
 8001e84:	42a5      	cmp	r5, r4
 8001e86:	d109      	bne.n	8001e9c <__libc_init_array+0x24>
 8001e88:	4e0b      	ldr	r6, [pc, #44]	; (8001eb8 <__libc_init_array+0x40>)
 8001e8a:	4c0c      	ldr	r4, [pc, #48]	; (8001ebc <__libc_init_array+0x44>)
 8001e8c:	f000 fc3c 	bl	8002708 <_init>
 8001e90:	1ba4      	subs	r4, r4, r6
 8001e92:	10a4      	asrs	r4, r4, #2
 8001e94:	2500      	movs	r5, #0
 8001e96:	42a5      	cmp	r5, r4
 8001e98:	d105      	bne.n	8001ea6 <__libc_init_array+0x2e>
 8001e9a:	bd70      	pop	{r4, r5, r6, pc}
 8001e9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ea0:	4798      	blx	r3
 8001ea2:	3501      	adds	r5, #1
 8001ea4:	e7ee      	b.n	8001e84 <__libc_init_array+0xc>
 8001ea6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001eaa:	4798      	blx	r3
 8001eac:	3501      	adds	r5, #1
 8001eae:	e7f2      	b.n	8001e96 <__libc_init_array+0x1e>
 8001eb0:	08002804 	.word	0x08002804
 8001eb4:	08002804 	.word	0x08002804
 8001eb8:	08002804 	.word	0x08002804
 8001ebc:	08002808 	.word	0x08002808

08001ec0 <memset>:
 8001ec0:	4402      	add	r2, r0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d100      	bne.n	8001eca <memset+0xa>
 8001ec8:	4770      	bx	lr
 8001eca:	f803 1b01 	strb.w	r1, [r3], #1
 8001ece:	e7f9      	b.n	8001ec4 <memset+0x4>

08001ed0 <siprintf>:
 8001ed0:	b40e      	push	{r1, r2, r3}
 8001ed2:	b500      	push	{lr}
 8001ed4:	b09c      	sub	sp, #112	; 0x70
 8001ed6:	ab1d      	add	r3, sp, #116	; 0x74
 8001ed8:	9002      	str	r0, [sp, #8]
 8001eda:	9006      	str	r0, [sp, #24]
 8001edc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001ee0:	4809      	ldr	r0, [pc, #36]	; (8001f08 <siprintf+0x38>)
 8001ee2:	9107      	str	r1, [sp, #28]
 8001ee4:	9104      	str	r1, [sp, #16]
 8001ee6:	4909      	ldr	r1, [pc, #36]	; (8001f0c <siprintf+0x3c>)
 8001ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8001eec:	9105      	str	r1, [sp, #20]
 8001eee:	6800      	ldr	r0, [r0, #0]
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	a902      	add	r1, sp, #8
 8001ef4:	f000 f86e 	bl	8001fd4 <_svfiprintf_r>
 8001ef8:	9b02      	ldr	r3, [sp, #8]
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
 8001efe:	b01c      	add	sp, #112	; 0x70
 8001f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f04:	b003      	add	sp, #12
 8001f06:	4770      	bx	lr
 8001f08:	20000018 	.word	0x20000018
 8001f0c:	ffff0208 	.word	0xffff0208

08001f10 <strcpy>:
 8001f10:	4603      	mov	r3, r0
 8001f12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001f16:	f803 2b01 	strb.w	r2, [r3], #1
 8001f1a:	2a00      	cmp	r2, #0
 8001f1c:	d1f9      	bne.n	8001f12 <strcpy+0x2>
 8001f1e:	4770      	bx	lr

08001f20 <__ssputs_r>:
 8001f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f24:	688e      	ldr	r6, [r1, #8]
 8001f26:	429e      	cmp	r6, r3
 8001f28:	4682      	mov	sl, r0
 8001f2a:	460c      	mov	r4, r1
 8001f2c:	4690      	mov	r8, r2
 8001f2e:	4699      	mov	r9, r3
 8001f30:	d837      	bhi.n	8001fa2 <__ssputs_r+0x82>
 8001f32:	898a      	ldrh	r2, [r1, #12]
 8001f34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f38:	d031      	beq.n	8001f9e <__ssputs_r+0x7e>
 8001f3a:	6825      	ldr	r5, [r4, #0]
 8001f3c:	6909      	ldr	r1, [r1, #16]
 8001f3e:	1a6f      	subs	r7, r5, r1
 8001f40:	6965      	ldr	r5, [r4, #20]
 8001f42:	2302      	movs	r3, #2
 8001f44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f48:	fb95 f5f3 	sdiv	r5, r5, r3
 8001f4c:	f109 0301 	add.w	r3, r9, #1
 8001f50:	443b      	add	r3, r7
 8001f52:	429d      	cmp	r5, r3
 8001f54:	bf38      	it	cc
 8001f56:	461d      	movcc	r5, r3
 8001f58:	0553      	lsls	r3, r2, #21
 8001f5a:	d530      	bpl.n	8001fbe <__ssputs_r+0x9e>
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	f000 fb2b 	bl	80025b8 <_malloc_r>
 8001f62:	4606      	mov	r6, r0
 8001f64:	b950      	cbnz	r0, 8001f7c <__ssputs_r+0x5c>
 8001f66:	230c      	movs	r3, #12
 8001f68:	f8ca 3000 	str.w	r3, [sl]
 8001f6c:	89a3      	ldrh	r3, [r4, #12]
 8001f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f72:	81a3      	strh	r3, [r4, #12]
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f7c:	463a      	mov	r2, r7
 8001f7e:	6921      	ldr	r1, [r4, #16]
 8001f80:	f000 faa8 	bl	80024d4 <memcpy>
 8001f84:	89a3      	ldrh	r3, [r4, #12]
 8001f86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f8e:	81a3      	strh	r3, [r4, #12]
 8001f90:	6126      	str	r6, [r4, #16]
 8001f92:	6165      	str	r5, [r4, #20]
 8001f94:	443e      	add	r6, r7
 8001f96:	1bed      	subs	r5, r5, r7
 8001f98:	6026      	str	r6, [r4, #0]
 8001f9a:	60a5      	str	r5, [r4, #8]
 8001f9c:	464e      	mov	r6, r9
 8001f9e:	454e      	cmp	r6, r9
 8001fa0:	d900      	bls.n	8001fa4 <__ssputs_r+0x84>
 8001fa2:	464e      	mov	r6, r9
 8001fa4:	4632      	mov	r2, r6
 8001fa6:	4641      	mov	r1, r8
 8001fa8:	6820      	ldr	r0, [r4, #0]
 8001faa:	f000 fa9e 	bl	80024ea <memmove>
 8001fae:	68a3      	ldr	r3, [r4, #8]
 8001fb0:	1b9b      	subs	r3, r3, r6
 8001fb2:	60a3      	str	r3, [r4, #8]
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	441e      	add	r6, r3
 8001fb8:	6026      	str	r6, [r4, #0]
 8001fba:	2000      	movs	r0, #0
 8001fbc:	e7dc      	b.n	8001f78 <__ssputs_r+0x58>
 8001fbe:	462a      	mov	r2, r5
 8001fc0:	f000 fb54 	bl	800266c <_realloc_r>
 8001fc4:	4606      	mov	r6, r0
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d1e2      	bne.n	8001f90 <__ssputs_r+0x70>
 8001fca:	6921      	ldr	r1, [r4, #16]
 8001fcc:	4650      	mov	r0, sl
 8001fce:	f000 faa5 	bl	800251c <_free_r>
 8001fd2:	e7c8      	b.n	8001f66 <__ssputs_r+0x46>

08001fd4 <_svfiprintf_r>:
 8001fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fd8:	461d      	mov	r5, r3
 8001fda:	898b      	ldrh	r3, [r1, #12]
 8001fdc:	061f      	lsls	r7, r3, #24
 8001fde:	b09d      	sub	sp, #116	; 0x74
 8001fe0:	4680      	mov	r8, r0
 8001fe2:	460c      	mov	r4, r1
 8001fe4:	4616      	mov	r6, r2
 8001fe6:	d50f      	bpl.n	8002008 <_svfiprintf_r+0x34>
 8001fe8:	690b      	ldr	r3, [r1, #16]
 8001fea:	b96b      	cbnz	r3, 8002008 <_svfiprintf_r+0x34>
 8001fec:	2140      	movs	r1, #64	; 0x40
 8001fee:	f000 fae3 	bl	80025b8 <_malloc_r>
 8001ff2:	6020      	str	r0, [r4, #0]
 8001ff4:	6120      	str	r0, [r4, #16]
 8001ff6:	b928      	cbnz	r0, 8002004 <_svfiprintf_r+0x30>
 8001ff8:	230c      	movs	r3, #12
 8001ffa:	f8c8 3000 	str.w	r3, [r8]
 8001ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8002002:	e0c8      	b.n	8002196 <_svfiprintf_r+0x1c2>
 8002004:	2340      	movs	r3, #64	; 0x40
 8002006:	6163      	str	r3, [r4, #20]
 8002008:	2300      	movs	r3, #0
 800200a:	9309      	str	r3, [sp, #36]	; 0x24
 800200c:	2320      	movs	r3, #32
 800200e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002012:	2330      	movs	r3, #48	; 0x30
 8002014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002018:	9503      	str	r5, [sp, #12]
 800201a:	f04f 0b01 	mov.w	fp, #1
 800201e:	4637      	mov	r7, r6
 8002020:	463d      	mov	r5, r7
 8002022:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002026:	b10b      	cbz	r3, 800202c <_svfiprintf_r+0x58>
 8002028:	2b25      	cmp	r3, #37	; 0x25
 800202a:	d13e      	bne.n	80020aa <_svfiprintf_r+0xd6>
 800202c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002030:	d00b      	beq.n	800204a <_svfiprintf_r+0x76>
 8002032:	4653      	mov	r3, sl
 8002034:	4632      	mov	r2, r6
 8002036:	4621      	mov	r1, r4
 8002038:	4640      	mov	r0, r8
 800203a:	f7ff ff71 	bl	8001f20 <__ssputs_r>
 800203e:	3001      	adds	r0, #1
 8002040:	f000 80a4 	beq.w	800218c <_svfiprintf_r+0x1b8>
 8002044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002046:	4453      	add	r3, sl
 8002048:	9309      	str	r3, [sp, #36]	; 0x24
 800204a:	783b      	ldrb	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 809d 	beq.w	800218c <_svfiprintf_r+0x1b8>
 8002052:	2300      	movs	r3, #0
 8002054:	f04f 32ff 	mov.w	r2, #4294967295
 8002058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800205c:	9304      	str	r3, [sp, #16]
 800205e:	9307      	str	r3, [sp, #28]
 8002060:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002064:	931a      	str	r3, [sp, #104]	; 0x68
 8002066:	462f      	mov	r7, r5
 8002068:	2205      	movs	r2, #5
 800206a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800206e:	4850      	ldr	r0, [pc, #320]	; (80021b0 <_svfiprintf_r+0x1dc>)
 8002070:	f7fe f8be 	bl	80001f0 <memchr>
 8002074:	9b04      	ldr	r3, [sp, #16]
 8002076:	b9d0      	cbnz	r0, 80020ae <_svfiprintf_r+0xda>
 8002078:	06d9      	lsls	r1, r3, #27
 800207a:	bf44      	itt	mi
 800207c:	2220      	movmi	r2, #32
 800207e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002082:	071a      	lsls	r2, r3, #28
 8002084:	bf44      	itt	mi
 8002086:	222b      	movmi	r2, #43	; 0x2b
 8002088:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800208c:	782a      	ldrb	r2, [r5, #0]
 800208e:	2a2a      	cmp	r2, #42	; 0x2a
 8002090:	d015      	beq.n	80020be <_svfiprintf_r+0xea>
 8002092:	9a07      	ldr	r2, [sp, #28]
 8002094:	462f      	mov	r7, r5
 8002096:	2000      	movs	r0, #0
 8002098:	250a      	movs	r5, #10
 800209a:	4639      	mov	r1, r7
 800209c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020a0:	3b30      	subs	r3, #48	; 0x30
 80020a2:	2b09      	cmp	r3, #9
 80020a4:	d94d      	bls.n	8002142 <_svfiprintf_r+0x16e>
 80020a6:	b1b8      	cbz	r0, 80020d8 <_svfiprintf_r+0x104>
 80020a8:	e00f      	b.n	80020ca <_svfiprintf_r+0xf6>
 80020aa:	462f      	mov	r7, r5
 80020ac:	e7b8      	b.n	8002020 <_svfiprintf_r+0x4c>
 80020ae:	4a40      	ldr	r2, [pc, #256]	; (80021b0 <_svfiprintf_r+0x1dc>)
 80020b0:	1a80      	subs	r0, r0, r2
 80020b2:	fa0b f000 	lsl.w	r0, fp, r0
 80020b6:	4318      	orrs	r0, r3
 80020b8:	9004      	str	r0, [sp, #16]
 80020ba:	463d      	mov	r5, r7
 80020bc:	e7d3      	b.n	8002066 <_svfiprintf_r+0x92>
 80020be:	9a03      	ldr	r2, [sp, #12]
 80020c0:	1d11      	adds	r1, r2, #4
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	9103      	str	r1, [sp, #12]
 80020c6:	2a00      	cmp	r2, #0
 80020c8:	db01      	blt.n	80020ce <_svfiprintf_r+0xfa>
 80020ca:	9207      	str	r2, [sp, #28]
 80020cc:	e004      	b.n	80020d8 <_svfiprintf_r+0x104>
 80020ce:	4252      	negs	r2, r2
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	9207      	str	r2, [sp, #28]
 80020d6:	9304      	str	r3, [sp, #16]
 80020d8:	783b      	ldrb	r3, [r7, #0]
 80020da:	2b2e      	cmp	r3, #46	; 0x2e
 80020dc:	d10c      	bne.n	80020f8 <_svfiprintf_r+0x124>
 80020de:	787b      	ldrb	r3, [r7, #1]
 80020e0:	2b2a      	cmp	r3, #42	; 0x2a
 80020e2:	d133      	bne.n	800214c <_svfiprintf_r+0x178>
 80020e4:	9b03      	ldr	r3, [sp, #12]
 80020e6:	1d1a      	adds	r2, r3, #4
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	9203      	str	r2, [sp, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bfb8      	it	lt
 80020f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80020f4:	3702      	adds	r7, #2
 80020f6:	9305      	str	r3, [sp, #20]
 80020f8:	4d2e      	ldr	r5, [pc, #184]	; (80021b4 <_svfiprintf_r+0x1e0>)
 80020fa:	7839      	ldrb	r1, [r7, #0]
 80020fc:	2203      	movs	r2, #3
 80020fe:	4628      	mov	r0, r5
 8002100:	f7fe f876 	bl	80001f0 <memchr>
 8002104:	b138      	cbz	r0, 8002116 <_svfiprintf_r+0x142>
 8002106:	2340      	movs	r3, #64	; 0x40
 8002108:	1b40      	subs	r0, r0, r5
 800210a:	fa03 f000 	lsl.w	r0, r3, r0
 800210e:	9b04      	ldr	r3, [sp, #16]
 8002110:	4303      	orrs	r3, r0
 8002112:	3701      	adds	r7, #1
 8002114:	9304      	str	r3, [sp, #16]
 8002116:	7839      	ldrb	r1, [r7, #0]
 8002118:	4827      	ldr	r0, [pc, #156]	; (80021b8 <_svfiprintf_r+0x1e4>)
 800211a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800211e:	2206      	movs	r2, #6
 8002120:	1c7e      	adds	r6, r7, #1
 8002122:	f7fe f865 	bl	80001f0 <memchr>
 8002126:	2800      	cmp	r0, #0
 8002128:	d038      	beq.n	800219c <_svfiprintf_r+0x1c8>
 800212a:	4b24      	ldr	r3, [pc, #144]	; (80021bc <_svfiprintf_r+0x1e8>)
 800212c:	bb13      	cbnz	r3, 8002174 <_svfiprintf_r+0x1a0>
 800212e:	9b03      	ldr	r3, [sp, #12]
 8002130:	3307      	adds	r3, #7
 8002132:	f023 0307 	bic.w	r3, r3, #7
 8002136:	3308      	adds	r3, #8
 8002138:	9303      	str	r3, [sp, #12]
 800213a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800213c:	444b      	add	r3, r9
 800213e:	9309      	str	r3, [sp, #36]	; 0x24
 8002140:	e76d      	b.n	800201e <_svfiprintf_r+0x4a>
 8002142:	fb05 3202 	mla	r2, r5, r2, r3
 8002146:	2001      	movs	r0, #1
 8002148:	460f      	mov	r7, r1
 800214a:	e7a6      	b.n	800209a <_svfiprintf_r+0xc6>
 800214c:	2300      	movs	r3, #0
 800214e:	3701      	adds	r7, #1
 8002150:	9305      	str	r3, [sp, #20]
 8002152:	4619      	mov	r1, r3
 8002154:	250a      	movs	r5, #10
 8002156:	4638      	mov	r0, r7
 8002158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800215c:	3a30      	subs	r2, #48	; 0x30
 800215e:	2a09      	cmp	r2, #9
 8002160:	d903      	bls.n	800216a <_svfiprintf_r+0x196>
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0c8      	beq.n	80020f8 <_svfiprintf_r+0x124>
 8002166:	9105      	str	r1, [sp, #20]
 8002168:	e7c6      	b.n	80020f8 <_svfiprintf_r+0x124>
 800216a:	fb05 2101 	mla	r1, r5, r1, r2
 800216e:	2301      	movs	r3, #1
 8002170:	4607      	mov	r7, r0
 8002172:	e7f0      	b.n	8002156 <_svfiprintf_r+0x182>
 8002174:	ab03      	add	r3, sp, #12
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	4622      	mov	r2, r4
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <_svfiprintf_r+0x1ec>)
 800217c:	a904      	add	r1, sp, #16
 800217e:	4640      	mov	r0, r8
 8002180:	f3af 8000 	nop.w
 8002184:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002188:	4681      	mov	r9, r0
 800218a:	d1d6      	bne.n	800213a <_svfiprintf_r+0x166>
 800218c:	89a3      	ldrh	r3, [r4, #12]
 800218e:	065b      	lsls	r3, r3, #25
 8002190:	f53f af35 	bmi.w	8001ffe <_svfiprintf_r+0x2a>
 8002194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002196:	b01d      	add	sp, #116	; 0x74
 8002198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800219c:	ab03      	add	r3, sp, #12
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	4622      	mov	r2, r4
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <_svfiprintf_r+0x1ec>)
 80021a4:	a904      	add	r1, sp, #16
 80021a6:	4640      	mov	r0, r8
 80021a8:	f000 f882 	bl	80022b0 <_printf_i>
 80021ac:	e7ea      	b.n	8002184 <_svfiprintf_r+0x1b0>
 80021ae:	bf00      	nop
 80021b0:	080027d1 	.word	0x080027d1
 80021b4:	080027d7 	.word	0x080027d7
 80021b8:	080027db 	.word	0x080027db
 80021bc:	00000000 	.word	0x00000000
 80021c0:	08001f21 	.word	0x08001f21

080021c4 <_printf_common>:
 80021c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021c8:	4691      	mov	r9, r2
 80021ca:	461f      	mov	r7, r3
 80021cc:	688a      	ldr	r2, [r1, #8]
 80021ce:	690b      	ldr	r3, [r1, #16]
 80021d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021d4:	4293      	cmp	r3, r2
 80021d6:	bfb8      	it	lt
 80021d8:	4613      	movlt	r3, r2
 80021da:	f8c9 3000 	str.w	r3, [r9]
 80021de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021e2:	4606      	mov	r6, r0
 80021e4:	460c      	mov	r4, r1
 80021e6:	b112      	cbz	r2, 80021ee <_printf_common+0x2a>
 80021e8:	3301      	adds	r3, #1
 80021ea:	f8c9 3000 	str.w	r3, [r9]
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	0699      	lsls	r1, r3, #26
 80021f2:	bf42      	ittt	mi
 80021f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80021f8:	3302      	addmi	r3, #2
 80021fa:	f8c9 3000 	strmi.w	r3, [r9]
 80021fe:	6825      	ldr	r5, [r4, #0]
 8002200:	f015 0506 	ands.w	r5, r5, #6
 8002204:	d107      	bne.n	8002216 <_printf_common+0x52>
 8002206:	f104 0a19 	add.w	sl, r4, #25
 800220a:	68e3      	ldr	r3, [r4, #12]
 800220c:	f8d9 2000 	ldr.w	r2, [r9]
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	42ab      	cmp	r3, r5
 8002214:	dc28      	bgt.n	8002268 <_printf_common+0xa4>
 8002216:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800221a:	6822      	ldr	r2, [r4, #0]
 800221c:	3300      	adds	r3, #0
 800221e:	bf18      	it	ne
 8002220:	2301      	movne	r3, #1
 8002222:	0692      	lsls	r2, r2, #26
 8002224:	d42d      	bmi.n	8002282 <_printf_common+0xbe>
 8002226:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800222a:	4639      	mov	r1, r7
 800222c:	4630      	mov	r0, r6
 800222e:	47c0      	blx	r8
 8002230:	3001      	adds	r0, #1
 8002232:	d020      	beq.n	8002276 <_printf_common+0xb2>
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	68e5      	ldr	r5, [r4, #12]
 8002238:	f8d9 2000 	ldr.w	r2, [r9]
 800223c:	f003 0306 	and.w	r3, r3, #6
 8002240:	2b04      	cmp	r3, #4
 8002242:	bf08      	it	eq
 8002244:	1aad      	subeq	r5, r5, r2
 8002246:	68a3      	ldr	r3, [r4, #8]
 8002248:	6922      	ldr	r2, [r4, #16]
 800224a:	bf0c      	ite	eq
 800224c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002250:	2500      	movne	r5, #0
 8002252:	4293      	cmp	r3, r2
 8002254:	bfc4      	itt	gt
 8002256:	1a9b      	subgt	r3, r3, r2
 8002258:	18ed      	addgt	r5, r5, r3
 800225a:	f04f 0900 	mov.w	r9, #0
 800225e:	341a      	adds	r4, #26
 8002260:	454d      	cmp	r5, r9
 8002262:	d11a      	bne.n	800229a <_printf_common+0xd6>
 8002264:	2000      	movs	r0, #0
 8002266:	e008      	b.n	800227a <_printf_common+0xb6>
 8002268:	2301      	movs	r3, #1
 800226a:	4652      	mov	r2, sl
 800226c:	4639      	mov	r1, r7
 800226e:	4630      	mov	r0, r6
 8002270:	47c0      	blx	r8
 8002272:	3001      	adds	r0, #1
 8002274:	d103      	bne.n	800227e <_printf_common+0xba>
 8002276:	f04f 30ff 	mov.w	r0, #4294967295
 800227a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800227e:	3501      	adds	r5, #1
 8002280:	e7c3      	b.n	800220a <_printf_common+0x46>
 8002282:	18e1      	adds	r1, r4, r3
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	2030      	movs	r0, #48	; 0x30
 8002288:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800228c:	4422      	add	r2, r4
 800228e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002292:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002296:	3302      	adds	r3, #2
 8002298:	e7c5      	b.n	8002226 <_printf_common+0x62>
 800229a:	2301      	movs	r3, #1
 800229c:	4622      	mov	r2, r4
 800229e:	4639      	mov	r1, r7
 80022a0:	4630      	mov	r0, r6
 80022a2:	47c0      	blx	r8
 80022a4:	3001      	adds	r0, #1
 80022a6:	d0e6      	beq.n	8002276 <_printf_common+0xb2>
 80022a8:	f109 0901 	add.w	r9, r9, #1
 80022ac:	e7d8      	b.n	8002260 <_printf_common+0x9c>
	...

080022b0 <_printf_i>:
 80022b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80022b8:	460c      	mov	r4, r1
 80022ba:	7e09      	ldrb	r1, [r1, #24]
 80022bc:	b085      	sub	sp, #20
 80022be:	296e      	cmp	r1, #110	; 0x6e
 80022c0:	4617      	mov	r7, r2
 80022c2:	4606      	mov	r6, r0
 80022c4:	4698      	mov	r8, r3
 80022c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80022c8:	f000 80b3 	beq.w	8002432 <_printf_i+0x182>
 80022cc:	d822      	bhi.n	8002314 <_printf_i+0x64>
 80022ce:	2963      	cmp	r1, #99	; 0x63
 80022d0:	d036      	beq.n	8002340 <_printf_i+0x90>
 80022d2:	d80a      	bhi.n	80022ea <_printf_i+0x3a>
 80022d4:	2900      	cmp	r1, #0
 80022d6:	f000 80b9 	beq.w	800244c <_printf_i+0x19c>
 80022da:	2958      	cmp	r1, #88	; 0x58
 80022dc:	f000 8083 	beq.w	80023e6 <_printf_i+0x136>
 80022e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80022e8:	e032      	b.n	8002350 <_printf_i+0xa0>
 80022ea:	2964      	cmp	r1, #100	; 0x64
 80022ec:	d001      	beq.n	80022f2 <_printf_i+0x42>
 80022ee:	2969      	cmp	r1, #105	; 0x69
 80022f0:	d1f6      	bne.n	80022e0 <_printf_i+0x30>
 80022f2:	6820      	ldr	r0, [r4, #0]
 80022f4:	6813      	ldr	r3, [r2, #0]
 80022f6:	0605      	lsls	r5, r0, #24
 80022f8:	f103 0104 	add.w	r1, r3, #4
 80022fc:	d52a      	bpl.n	8002354 <_printf_i+0xa4>
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6011      	str	r1, [r2, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	da03      	bge.n	800230e <_printf_i+0x5e>
 8002306:	222d      	movs	r2, #45	; 0x2d
 8002308:	425b      	negs	r3, r3
 800230a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800230e:	486f      	ldr	r0, [pc, #444]	; (80024cc <_printf_i+0x21c>)
 8002310:	220a      	movs	r2, #10
 8002312:	e039      	b.n	8002388 <_printf_i+0xd8>
 8002314:	2973      	cmp	r1, #115	; 0x73
 8002316:	f000 809d 	beq.w	8002454 <_printf_i+0x1a4>
 800231a:	d808      	bhi.n	800232e <_printf_i+0x7e>
 800231c:	296f      	cmp	r1, #111	; 0x6f
 800231e:	d020      	beq.n	8002362 <_printf_i+0xb2>
 8002320:	2970      	cmp	r1, #112	; 0x70
 8002322:	d1dd      	bne.n	80022e0 <_printf_i+0x30>
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	f043 0320 	orr.w	r3, r3, #32
 800232a:	6023      	str	r3, [r4, #0]
 800232c:	e003      	b.n	8002336 <_printf_i+0x86>
 800232e:	2975      	cmp	r1, #117	; 0x75
 8002330:	d017      	beq.n	8002362 <_printf_i+0xb2>
 8002332:	2978      	cmp	r1, #120	; 0x78
 8002334:	d1d4      	bne.n	80022e0 <_printf_i+0x30>
 8002336:	2378      	movs	r3, #120	; 0x78
 8002338:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800233c:	4864      	ldr	r0, [pc, #400]	; (80024d0 <_printf_i+0x220>)
 800233e:	e055      	b.n	80023ec <_printf_i+0x13c>
 8002340:	6813      	ldr	r3, [r2, #0]
 8002342:	1d19      	adds	r1, r3, #4
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6011      	str	r1, [r2, #0]
 8002348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800234c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002350:	2301      	movs	r3, #1
 8002352:	e08c      	b.n	800246e <_printf_i+0x1be>
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6011      	str	r1, [r2, #0]
 8002358:	f010 0f40 	tst.w	r0, #64	; 0x40
 800235c:	bf18      	it	ne
 800235e:	b21b      	sxthne	r3, r3
 8002360:	e7cf      	b.n	8002302 <_printf_i+0x52>
 8002362:	6813      	ldr	r3, [r2, #0]
 8002364:	6825      	ldr	r5, [r4, #0]
 8002366:	1d18      	adds	r0, r3, #4
 8002368:	6010      	str	r0, [r2, #0]
 800236a:	0628      	lsls	r0, r5, #24
 800236c:	d501      	bpl.n	8002372 <_printf_i+0xc2>
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	e002      	b.n	8002378 <_printf_i+0xc8>
 8002372:	0668      	lsls	r0, r5, #25
 8002374:	d5fb      	bpl.n	800236e <_printf_i+0xbe>
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	4854      	ldr	r0, [pc, #336]	; (80024cc <_printf_i+0x21c>)
 800237a:	296f      	cmp	r1, #111	; 0x6f
 800237c:	bf14      	ite	ne
 800237e:	220a      	movne	r2, #10
 8002380:	2208      	moveq	r2, #8
 8002382:	2100      	movs	r1, #0
 8002384:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002388:	6865      	ldr	r5, [r4, #4]
 800238a:	60a5      	str	r5, [r4, #8]
 800238c:	2d00      	cmp	r5, #0
 800238e:	f2c0 8095 	blt.w	80024bc <_printf_i+0x20c>
 8002392:	6821      	ldr	r1, [r4, #0]
 8002394:	f021 0104 	bic.w	r1, r1, #4
 8002398:	6021      	str	r1, [r4, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d13d      	bne.n	800241a <_printf_i+0x16a>
 800239e:	2d00      	cmp	r5, #0
 80023a0:	f040 808e 	bne.w	80024c0 <_printf_i+0x210>
 80023a4:	4665      	mov	r5, ip
 80023a6:	2a08      	cmp	r2, #8
 80023a8:	d10b      	bne.n	80023c2 <_printf_i+0x112>
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	07db      	lsls	r3, r3, #31
 80023ae:	d508      	bpl.n	80023c2 <_printf_i+0x112>
 80023b0:	6923      	ldr	r3, [r4, #16]
 80023b2:	6862      	ldr	r2, [r4, #4]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	bfde      	ittt	le
 80023b8:	2330      	movle	r3, #48	; 0x30
 80023ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80023be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80023c2:	ebac 0305 	sub.w	r3, ip, r5
 80023c6:	6123      	str	r3, [r4, #16]
 80023c8:	f8cd 8000 	str.w	r8, [sp]
 80023cc:	463b      	mov	r3, r7
 80023ce:	aa03      	add	r2, sp, #12
 80023d0:	4621      	mov	r1, r4
 80023d2:	4630      	mov	r0, r6
 80023d4:	f7ff fef6 	bl	80021c4 <_printf_common>
 80023d8:	3001      	adds	r0, #1
 80023da:	d14d      	bne.n	8002478 <_printf_i+0x1c8>
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	b005      	add	sp, #20
 80023e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023e6:	4839      	ldr	r0, [pc, #228]	; (80024cc <_printf_i+0x21c>)
 80023e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80023ec:	6813      	ldr	r3, [r2, #0]
 80023ee:	6821      	ldr	r1, [r4, #0]
 80023f0:	1d1d      	adds	r5, r3, #4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6015      	str	r5, [r2, #0]
 80023f6:	060a      	lsls	r2, r1, #24
 80023f8:	d50b      	bpl.n	8002412 <_printf_i+0x162>
 80023fa:	07ca      	lsls	r2, r1, #31
 80023fc:	bf44      	itt	mi
 80023fe:	f041 0120 	orrmi.w	r1, r1, #32
 8002402:	6021      	strmi	r1, [r4, #0]
 8002404:	b91b      	cbnz	r3, 800240e <_printf_i+0x15e>
 8002406:	6822      	ldr	r2, [r4, #0]
 8002408:	f022 0220 	bic.w	r2, r2, #32
 800240c:	6022      	str	r2, [r4, #0]
 800240e:	2210      	movs	r2, #16
 8002410:	e7b7      	b.n	8002382 <_printf_i+0xd2>
 8002412:	064d      	lsls	r5, r1, #25
 8002414:	bf48      	it	mi
 8002416:	b29b      	uxthmi	r3, r3
 8002418:	e7ef      	b.n	80023fa <_printf_i+0x14a>
 800241a:	4665      	mov	r5, ip
 800241c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002420:	fb02 3311 	mls	r3, r2, r1, r3
 8002424:	5cc3      	ldrb	r3, [r0, r3]
 8002426:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800242a:	460b      	mov	r3, r1
 800242c:	2900      	cmp	r1, #0
 800242e:	d1f5      	bne.n	800241c <_printf_i+0x16c>
 8002430:	e7b9      	b.n	80023a6 <_printf_i+0xf6>
 8002432:	6813      	ldr	r3, [r2, #0]
 8002434:	6825      	ldr	r5, [r4, #0]
 8002436:	6961      	ldr	r1, [r4, #20]
 8002438:	1d18      	adds	r0, r3, #4
 800243a:	6010      	str	r0, [r2, #0]
 800243c:	0628      	lsls	r0, r5, #24
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	d501      	bpl.n	8002446 <_printf_i+0x196>
 8002442:	6019      	str	r1, [r3, #0]
 8002444:	e002      	b.n	800244c <_printf_i+0x19c>
 8002446:	066a      	lsls	r2, r5, #25
 8002448:	d5fb      	bpl.n	8002442 <_printf_i+0x192>
 800244a:	8019      	strh	r1, [r3, #0]
 800244c:	2300      	movs	r3, #0
 800244e:	6123      	str	r3, [r4, #16]
 8002450:	4665      	mov	r5, ip
 8002452:	e7b9      	b.n	80023c8 <_printf_i+0x118>
 8002454:	6813      	ldr	r3, [r2, #0]
 8002456:	1d19      	adds	r1, r3, #4
 8002458:	6011      	str	r1, [r2, #0]
 800245a:	681d      	ldr	r5, [r3, #0]
 800245c:	6862      	ldr	r2, [r4, #4]
 800245e:	2100      	movs	r1, #0
 8002460:	4628      	mov	r0, r5
 8002462:	f7fd fec5 	bl	80001f0 <memchr>
 8002466:	b108      	cbz	r0, 800246c <_printf_i+0x1bc>
 8002468:	1b40      	subs	r0, r0, r5
 800246a:	6060      	str	r0, [r4, #4]
 800246c:	6863      	ldr	r3, [r4, #4]
 800246e:	6123      	str	r3, [r4, #16]
 8002470:	2300      	movs	r3, #0
 8002472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002476:	e7a7      	b.n	80023c8 <_printf_i+0x118>
 8002478:	6923      	ldr	r3, [r4, #16]
 800247a:	462a      	mov	r2, r5
 800247c:	4639      	mov	r1, r7
 800247e:	4630      	mov	r0, r6
 8002480:	47c0      	blx	r8
 8002482:	3001      	adds	r0, #1
 8002484:	d0aa      	beq.n	80023dc <_printf_i+0x12c>
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	079b      	lsls	r3, r3, #30
 800248a:	d413      	bmi.n	80024b4 <_printf_i+0x204>
 800248c:	68e0      	ldr	r0, [r4, #12]
 800248e:	9b03      	ldr	r3, [sp, #12]
 8002490:	4298      	cmp	r0, r3
 8002492:	bfb8      	it	lt
 8002494:	4618      	movlt	r0, r3
 8002496:	e7a3      	b.n	80023e0 <_printf_i+0x130>
 8002498:	2301      	movs	r3, #1
 800249a:	464a      	mov	r2, r9
 800249c:	4639      	mov	r1, r7
 800249e:	4630      	mov	r0, r6
 80024a0:	47c0      	blx	r8
 80024a2:	3001      	adds	r0, #1
 80024a4:	d09a      	beq.n	80023dc <_printf_i+0x12c>
 80024a6:	3501      	adds	r5, #1
 80024a8:	68e3      	ldr	r3, [r4, #12]
 80024aa:	9a03      	ldr	r2, [sp, #12]
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	42ab      	cmp	r3, r5
 80024b0:	dcf2      	bgt.n	8002498 <_printf_i+0x1e8>
 80024b2:	e7eb      	b.n	800248c <_printf_i+0x1dc>
 80024b4:	2500      	movs	r5, #0
 80024b6:	f104 0919 	add.w	r9, r4, #25
 80024ba:	e7f5      	b.n	80024a8 <_printf_i+0x1f8>
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1ac      	bne.n	800241a <_printf_i+0x16a>
 80024c0:	7803      	ldrb	r3, [r0, #0]
 80024c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024ca:	e76c      	b.n	80023a6 <_printf_i+0xf6>
 80024cc:	080027e2 	.word	0x080027e2
 80024d0:	080027f3 	.word	0x080027f3

080024d4 <memcpy>:
 80024d4:	b510      	push	{r4, lr}
 80024d6:	1e43      	subs	r3, r0, #1
 80024d8:	440a      	add	r2, r1
 80024da:	4291      	cmp	r1, r2
 80024dc:	d100      	bne.n	80024e0 <memcpy+0xc>
 80024de:	bd10      	pop	{r4, pc}
 80024e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80024e8:	e7f7      	b.n	80024da <memcpy+0x6>

080024ea <memmove>:
 80024ea:	4288      	cmp	r0, r1
 80024ec:	b510      	push	{r4, lr}
 80024ee:	eb01 0302 	add.w	r3, r1, r2
 80024f2:	d807      	bhi.n	8002504 <memmove+0x1a>
 80024f4:	1e42      	subs	r2, r0, #1
 80024f6:	4299      	cmp	r1, r3
 80024f8:	d00a      	beq.n	8002510 <memmove+0x26>
 80024fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002502:	e7f8      	b.n	80024f6 <memmove+0xc>
 8002504:	4283      	cmp	r3, r0
 8002506:	d9f5      	bls.n	80024f4 <memmove+0xa>
 8002508:	1881      	adds	r1, r0, r2
 800250a:	1ad2      	subs	r2, r2, r3
 800250c:	42d3      	cmn	r3, r2
 800250e:	d100      	bne.n	8002512 <memmove+0x28>
 8002510:	bd10      	pop	{r4, pc}
 8002512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002516:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800251a:	e7f7      	b.n	800250c <memmove+0x22>

0800251c <_free_r>:
 800251c:	b538      	push	{r3, r4, r5, lr}
 800251e:	4605      	mov	r5, r0
 8002520:	2900      	cmp	r1, #0
 8002522:	d045      	beq.n	80025b0 <_free_r+0x94>
 8002524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002528:	1f0c      	subs	r4, r1, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	bfb8      	it	lt
 800252e:	18e4      	addlt	r4, r4, r3
 8002530:	f000 f8d2 	bl	80026d8 <__malloc_lock>
 8002534:	4a1f      	ldr	r2, [pc, #124]	; (80025b4 <_free_r+0x98>)
 8002536:	6813      	ldr	r3, [r2, #0]
 8002538:	4610      	mov	r0, r2
 800253a:	b933      	cbnz	r3, 800254a <_free_r+0x2e>
 800253c:	6063      	str	r3, [r4, #4]
 800253e:	6014      	str	r4, [r2, #0]
 8002540:	4628      	mov	r0, r5
 8002542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002546:	f000 b8c8 	b.w	80026da <__malloc_unlock>
 800254a:	42a3      	cmp	r3, r4
 800254c:	d90c      	bls.n	8002568 <_free_r+0x4c>
 800254e:	6821      	ldr	r1, [r4, #0]
 8002550:	1862      	adds	r2, r4, r1
 8002552:	4293      	cmp	r3, r2
 8002554:	bf04      	itt	eq
 8002556:	681a      	ldreq	r2, [r3, #0]
 8002558:	685b      	ldreq	r3, [r3, #4]
 800255a:	6063      	str	r3, [r4, #4]
 800255c:	bf04      	itt	eq
 800255e:	1852      	addeq	r2, r2, r1
 8002560:	6022      	streq	r2, [r4, #0]
 8002562:	6004      	str	r4, [r0, #0]
 8002564:	e7ec      	b.n	8002540 <_free_r+0x24>
 8002566:	4613      	mov	r3, r2
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	b10a      	cbz	r2, 8002570 <_free_r+0x54>
 800256c:	42a2      	cmp	r2, r4
 800256e:	d9fa      	bls.n	8002566 <_free_r+0x4a>
 8002570:	6819      	ldr	r1, [r3, #0]
 8002572:	1858      	adds	r0, r3, r1
 8002574:	42a0      	cmp	r0, r4
 8002576:	d10b      	bne.n	8002590 <_free_r+0x74>
 8002578:	6820      	ldr	r0, [r4, #0]
 800257a:	4401      	add	r1, r0
 800257c:	1858      	adds	r0, r3, r1
 800257e:	4282      	cmp	r2, r0
 8002580:	6019      	str	r1, [r3, #0]
 8002582:	d1dd      	bne.n	8002540 <_free_r+0x24>
 8002584:	6810      	ldr	r0, [r2, #0]
 8002586:	6852      	ldr	r2, [r2, #4]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	4401      	add	r1, r0
 800258c:	6019      	str	r1, [r3, #0]
 800258e:	e7d7      	b.n	8002540 <_free_r+0x24>
 8002590:	d902      	bls.n	8002598 <_free_r+0x7c>
 8002592:	230c      	movs	r3, #12
 8002594:	602b      	str	r3, [r5, #0]
 8002596:	e7d3      	b.n	8002540 <_free_r+0x24>
 8002598:	6820      	ldr	r0, [r4, #0]
 800259a:	1821      	adds	r1, r4, r0
 800259c:	428a      	cmp	r2, r1
 800259e:	bf04      	itt	eq
 80025a0:	6811      	ldreq	r1, [r2, #0]
 80025a2:	6852      	ldreq	r2, [r2, #4]
 80025a4:	6062      	str	r2, [r4, #4]
 80025a6:	bf04      	itt	eq
 80025a8:	1809      	addeq	r1, r1, r0
 80025aa:	6021      	streq	r1, [r4, #0]
 80025ac:	605c      	str	r4, [r3, #4]
 80025ae:	e7c7      	b.n	8002540 <_free_r+0x24>
 80025b0:	bd38      	pop	{r3, r4, r5, pc}
 80025b2:	bf00      	nop
 80025b4:	2000009c 	.word	0x2000009c

080025b8 <_malloc_r>:
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	1ccd      	adds	r5, r1, #3
 80025bc:	f025 0503 	bic.w	r5, r5, #3
 80025c0:	3508      	adds	r5, #8
 80025c2:	2d0c      	cmp	r5, #12
 80025c4:	bf38      	it	cc
 80025c6:	250c      	movcc	r5, #12
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	4606      	mov	r6, r0
 80025cc:	db01      	blt.n	80025d2 <_malloc_r+0x1a>
 80025ce:	42a9      	cmp	r1, r5
 80025d0:	d903      	bls.n	80025da <_malloc_r+0x22>
 80025d2:	230c      	movs	r3, #12
 80025d4:	6033      	str	r3, [r6, #0]
 80025d6:	2000      	movs	r0, #0
 80025d8:	bd70      	pop	{r4, r5, r6, pc}
 80025da:	f000 f87d 	bl	80026d8 <__malloc_lock>
 80025de:	4a21      	ldr	r2, [pc, #132]	; (8002664 <_malloc_r+0xac>)
 80025e0:	6814      	ldr	r4, [r2, #0]
 80025e2:	4621      	mov	r1, r4
 80025e4:	b991      	cbnz	r1, 800260c <_malloc_r+0x54>
 80025e6:	4c20      	ldr	r4, [pc, #128]	; (8002668 <_malloc_r+0xb0>)
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	b91b      	cbnz	r3, 80025f4 <_malloc_r+0x3c>
 80025ec:	4630      	mov	r0, r6
 80025ee:	f000 f863 	bl	80026b8 <_sbrk_r>
 80025f2:	6020      	str	r0, [r4, #0]
 80025f4:	4629      	mov	r1, r5
 80025f6:	4630      	mov	r0, r6
 80025f8:	f000 f85e 	bl	80026b8 <_sbrk_r>
 80025fc:	1c43      	adds	r3, r0, #1
 80025fe:	d124      	bne.n	800264a <_malloc_r+0x92>
 8002600:	230c      	movs	r3, #12
 8002602:	6033      	str	r3, [r6, #0]
 8002604:	4630      	mov	r0, r6
 8002606:	f000 f868 	bl	80026da <__malloc_unlock>
 800260a:	e7e4      	b.n	80025d6 <_malloc_r+0x1e>
 800260c:	680b      	ldr	r3, [r1, #0]
 800260e:	1b5b      	subs	r3, r3, r5
 8002610:	d418      	bmi.n	8002644 <_malloc_r+0x8c>
 8002612:	2b0b      	cmp	r3, #11
 8002614:	d90f      	bls.n	8002636 <_malloc_r+0x7e>
 8002616:	600b      	str	r3, [r1, #0]
 8002618:	50cd      	str	r5, [r1, r3]
 800261a:	18cc      	adds	r4, r1, r3
 800261c:	4630      	mov	r0, r6
 800261e:	f000 f85c 	bl	80026da <__malloc_unlock>
 8002622:	f104 000b 	add.w	r0, r4, #11
 8002626:	1d23      	adds	r3, r4, #4
 8002628:	f020 0007 	bic.w	r0, r0, #7
 800262c:	1ac3      	subs	r3, r0, r3
 800262e:	d0d3      	beq.n	80025d8 <_malloc_r+0x20>
 8002630:	425a      	negs	r2, r3
 8002632:	50e2      	str	r2, [r4, r3]
 8002634:	e7d0      	b.n	80025d8 <_malloc_r+0x20>
 8002636:	428c      	cmp	r4, r1
 8002638:	684b      	ldr	r3, [r1, #4]
 800263a:	bf16      	itet	ne
 800263c:	6063      	strne	r3, [r4, #4]
 800263e:	6013      	streq	r3, [r2, #0]
 8002640:	460c      	movne	r4, r1
 8002642:	e7eb      	b.n	800261c <_malloc_r+0x64>
 8002644:	460c      	mov	r4, r1
 8002646:	6849      	ldr	r1, [r1, #4]
 8002648:	e7cc      	b.n	80025e4 <_malloc_r+0x2c>
 800264a:	1cc4      	adds	r4, r0, #3
 800264c:	f024 0403 	bic.w	r4, r4, #3
 8002650:	42a0      	cmp	r0, r4
 8002652:	d005      	beq.n	8002660 <_malloc_r+0xa8>
 8002654:	1a21      	subs	r1, r4, r0
 8002656:	4630      	mov	r0, r6
 8002658:	f000 f82e 	bl	80026b8 <_sbrk_r>
 800265c:	3001      	adds	r0, #1
 800265e:	d0cf      	beq.n	8002600 <_malloc_r+0x48>
 8002660:	6025      	str	r5, [r4, #0]
 8002662:	e7db      	b.n	800261c <_malloc_r+0x64>
 8002664:	2000009c 	.word	0x2000009c
 8002668:	200000a0 	.word	0x200000a0

0800266c <_realloc_r>:
 800266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266e:	4607      	mov	r7, r0
 8002670:	4614      	mov	r4, r2
 8002672:	460e      	mov	r6, r1
 8002674:	b921      	cbnz	r1, 8002680 <_realloc_r+0x14>
 8002676:	4611      	mov	r1, r2
 8002678:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800267c:	f7ff bf9c 	b.w	80025b8 <_malloc_r>
 8002680:	b922      	cbnz	r2, 800268c <_realloc_r+0x20>
 8002682:	f7ff ff4b 	bl	800251c <_free_r>
 8002686:	4625      	mov	r5, r4
 8002688:	4628      	mov	r0, r5
 800268a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800268c:	f000 f826 	bl	80026dc <_malloc_usable_size_r>
 8002690:	42a0      	cmp	r0, r4
 8002692:	d20f      	bcs.n	80026b4 <_realloc_r+0x48>
 8002694:	4621      	mov	r1, r4
 8002696:	4638      	mov	r0, r7
 8002698:	f7ff ff8e 	bl	80025b8 <_malloc_r>
 800269c:	4605      	mov	r5, r0
 800269e:	2800      	cmp	r0, #0
 80026a0:	d0f2      	beq.n	8002688 <_realloc_r+0x1c>
 80026a2:	4631      	mov	r1, r6
 80026a4:	4622      	mov	r2, r4
 80026a6:	f7ff ff15 	bl	80024d4 <memcpy>
 80026aa:	4631      	mov	r1, r6
 80026ac:	4638      	mov	r0, r7
 80026ae:	f7ff ff35 	bl	800251c <_free_r>
 80026b2:	e7e9      	b.n	8002688 <_realloc_r+0x1c>
 80026b4:	4635      	mov	r5, r6
 80026b6:	e7e7      	b.n	8002688 <_realloc_r+0x1c>

080026b8 <_sbrk_r>:
 80026b8:	b538      	push	{r3, r4, r5, lr}
 80026ba:	4c06      	ldr	r4, [pc, #24]	; (80026d4 <_sbrk_r+0x1c>)
 80026bc:	2300      	movs	r3, #0
 80026be:	4605      	mov	r5, r0
 80026c0:	4608      	mov	r0, r1
 80026c2:	6023      	str	r3, [r4, #0]
 80026c4:	f000 f812 	bl	80026ec <_sbrk>
 80026c8:	1c43      	adds	r3, r0, #1
 80026ca:	d102      	bne.n	80026d2 <_sbrk_r+0x1a>
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	b103      	cbz	r3, 80026d2 <_sbrk_r+0x1a>
 80026d0:	602b      	str	r3, [r5, #0]
 80026d2:	bd38      	pop	{r3, r4, r5, pc}
 80026d4:	20000294 	.word	0x20000294

080026d8 <__malloc_lock>:
 80026d8:	4770      	bx	lr

080026da <__malloc_unlock>:
 80026da:	4770      	bx	lr

080026dc <_malloc_usable_size_r>:
 80026dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026e0:	1f18      	subs	r0, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bfbc      	itt	lt
 80026e6:	580b      	ldrlt	r3, [r1, r0]
 80026e8:	18c0      	addlt	r0, r0, r3
 80026ea:	4770      	bx	lr

080026ec <_sbrk>:
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <_sbrk+0x14>)
 80026ee:	6819      	ldr	r1, [r3, #0]
 80026f0:	4602      	mov	r2, r0
 80026f2:	b909      	cbnz	r1, 80026f8 <_sbrk+0xc>
 80026f4:	4903      	ldr	r1, [pc, #12]	; (8002704 <_sbrk+0x18>)
 80026f6:	6019      	str	r1, [r3, #0]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	4402      	add	r2, r0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	4770      	bx	lr
 8002700:	200000a4 	.word	0x200000a4
 8002704:	20000298 	.word	0x20000298

08002708 <_init>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	bf00      	nop
 800270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270e:	bc08      	pop	{r3}
 8002710:	469e      	mov	lr, r3
 8002712:	4770      	bx	lr

08002714 <_fini>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	bf00      	nop
 8002718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271a:	bc08      	pop	{r3}
 800271c:	469e      	mov	lr, r3
 800271e:	4770      	bx	lr
